[
  {
    "id": "JS-EVAL-001",
    "language": "javascript",
    "category": "Dangerous Function",
    "owasp": "A03:2021-Injection",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "\\beval\\s*\\(",
    "message": "Use of eval() can lead to code injection.",
    "suggestion": "Avoid eval(); use JSON.parse or pre-defined function maps."
  },
  {
    "id": "JS-EXEC-001",
    "language": "javascript",
    "category": "Command Execution",
    "owasp": "A03:2021-Injection",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "child_process\\.(exec|execSync)\\s*\\(",
    "message": "Use of exec may allow command injection if input is not sanitized.",
    "suggestion": "Use safer spawn with arg arrays; validate/whitelist inputs."
  },
  {
    "id": "JS-XSS-001",
    "language": "javascript",
    "category": "Cross-Site Scripting",
    "owasp": "A03:2021-Injection",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "(innerHTML|outerHTML|document\\.write)\\s*=",
    "message": "Possible DOM-based XSS via unsafe sink.",
    "suggestion": "Use textContent instead of innerHTML; sanitize/encode inputs."
  },
  {
    "id": "JS-TIMEOUT-001",
    "language": "javascript",
    "category": "Dangerous Function",
    "owasp": "A03:2021-Injection",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "set(?:Timeout|Interval)\\s*\\(\\s*(['\"]).+?\\1",
    "message": "Passing strings to setTimeout/setInterval executes code like eval().",
    "suggestion": "Use function references instead of strings."
  },
  {
    "id": "JS-CRYPTO-001",
    "language": "javascript",
    "category": "Weak Cryptography",
    "owasp": "A02:2021-Cryptographic Failures",
    "severity": "MEDIUM",
    "type": "regex",
    "pattern": "crypto\\.createHash\\s*\\(\\s*['\\\"](md5|sha1)['\\\"]",
    "message": "Weak hash algorithm used.",
    "suggestion": "Use SHA-256/512 or password hashing like bcrypt/argon2."
  },
  {
    "id": "JS-ERROR-LEAK-001",
    "language": "javascript",
    "category": "Error Handling",
    "owasp": "A09:2021-Security Logging and Monitoring Failures",
    "severity": "LOW",
    "type": "regex",
    "pattern": "res\\.send\\s*\\(\\s*err(\\.stack)?\\s*\\)",
    "message": "Leaking errors/stacks to clients reveals sensitive info.",
    "suggestion": "Log errors server-side and return generic messages."
  },
  {
    "id": "JS-EVAL-AST-001",
    "language": "javascript",
    "category": "Dangerous Function",
    "owasp": "A03:2021-Injection",
    "severity": "HIGH",
    "type": "ast",
    "nodeType": "CallExpression",
    "calleeName": "eval",
    "message": "eval() detected via AST; allows arbitrary code execution.",
    "suggestion": "Avoid eval(); use JSON.parse or predefined safe alternatives."
  },
  {
    "id": "JS-NEWFUNC-AST-001",
    "language": "javascript",
    "category": "Dangerous Function",
    "owasp": "A03:2021-Injection",
    "severity": "HIGH",
    "type": "ast",
    "nodeType": "NewExpression",
    "calleeName": "Function",
    "message": "Function constructor detected; unsafe dynamic code execution.",
    "suggestion": "Avoid new Function(); refactor to safe static functions."
  },
  {
    "id": "JS-SECRET-001",
    "language": "javascript",
    "category": "Secrets",
    "owasp": "A02:2021-Cryptographic Failures",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "(api[-_]?key|secret|token)\\s*[:=]\\s*['\"][A-Za-z0-9_\\-]{16,}['\"]",
    "message": "Possible hardcoded secret or credential detected.",
    "suggestion": "Move secrets to environment variables or a secure vault."
  },
  {
    "id": "JS-COMMENT-INFO-001",
    "language": "javascript",
    "category": "Code Hygiene",
    "severity": "LOW",
    "type": "regex",
    "pattern": "//.*(TODO|FIXME|HACK)",
    "message": "Suspicious comment found (TODO/FIXME/HACK).",
    "suggestion": "Review and resolve temporary or insecure code comments."
  },
  {
    "id": "PHP-EVAL-001",
    "language": "php",
    "category": "Dangerous Function",
    "owasp": "A03:2021-Injection",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "\\beval\\s*\\(",
    "message": "Use of eval() can lead to code injection.",
    "suggestion": "Avoid eval(); use safer alternatives."
  },
  {
    "id": "PHP-SYSTEM-EXEC-001",
    "language": "php",
    "category": "Command Execution",
    "owasp": "A03:2021-Injection",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "@?\\s*(system|exec|shell_exec|passthru)\\s*\\(",
    "message": "Command execution can lead to injection if args are tainted.",
    "suggestion": "Avoid shell execution; use built-in APIs and strict validation."
  },
  {
    "id": "PHP-XSS-001",
    "language": "php",
    "category": "Cross-Site Scripting",
    "owasp": "A03:2021-Injection",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "echo\\s+\\$_(GET|POST|REQUEST|COOKIE)\\b",
    "message": "Echoing unescaped user input can cause XSS.",
    "suggestion": "Encode output with htmlspecialchars and validate inputs."
  },
  {
    "id": "PHP-CRYPTO-001",
    "language": "php",
    "category": "Weak Cryptography",
    "owasp": "A02:2021-Cryptographic Failures",
    "severity": "MEDIUM",
    "type": "regex",
    "pattern": "\\b(md5|sha1)\\s*\\(",
    "message": "Weak hash algorithm used.",
    "suggestion": "Use password_hash (bcrypt/argon2) or sodium/openssl strong hashes."
  },
  {
    "id": "PHP-ERROR-LEAK-001",
    "language": "php",
    "category": "Error Handling",
    "owasp": "A09:2021-Security Logging and Monitoring Failures",
    "severity": "LOW",
    "type": "regex",
    "pattern": "(var_dump|print_r|die|phpinfo)\\s*\\(",
    "message": "Leaking raw errors or phpinfo() reveals sensitive info.",
    "suggestion": "Log errors server-side and show generic error messages."
  },
  {
    "id": "PHP-SYSTEM-AST-001",
    "language": "php",
    "category": "Command Execution",
    "owasp": "A03:2021-Injection",
    "severity": "HIGH",
    "type": "ast",
    "nodeType": "call",
    "calleeName": "system",
    "message": "system() detected in PHP AST; may allow command injection.",
    "suggestion": "Avoid system(); use safer built-in APIs."
  },
  {
    "id": "PHP-EXEC-AST-001",
    "language": "php",
    "category": "Command Execution",
    "owasp": "A03:2021-Injection",
    "severity": "HIGH",
    "type": "ast",
    "nodeType": "call",
    "calleeName": "exec",
    "message": "exec() detected in PHP AST; may allow command injection.",
    "suggestion": "Avoid exec(); use safer built-in APIs."
  },
  {
    "id": "PHP-MYSQLI-001",
    "language": "php",
    "category": "SQL Injection",
    "owasp": "A03:2021-Injection",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "@?\\s*mysqli_query\\s*\\(",
    "message": "Use of mysqli_query with untrusted input may lead to SQL Injection.",
    "suggestion": "Always use prepared statements (mysqli_stmt or PDO)."
  },
  {
    "id": "PHP-MYSQL-LEGACY-001",
    "language": "php",
    "category": "SQL Injection",
    "owasp": "A03:2021-Injection",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "mysql_query\\s*\\(",
    "message": "Use of deprecated mysql_* API with untrusted input allows SQL Injection.",
    "suggestion": "Migrate to mysqli or PDO with prepared statements."
  },
  {
    "id": "PHP-INCLUDE-001",
    "language": "php",
    "category": "File Inclusion",
    "owasp": "A05:2021-Security Misconfiguration",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "@?\\s*(include|require)(_once)?\\s*\\(",
    "message": "Dynamic include/require detected. May allow LFI/RFI.",
    "suggestion": "Never include user input in include/require paths. Use whitelists."
  },
  {
    "id": "PHP-FILE-READ-001",
    "language": "php",
    "category": "Path Traversal",
    "owasp": "A05:2021-Security Misconfiguration",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "@?\\s*file_get_contents\\s*\\(",
    "message": "file_get_contents on user input may allow path traversal / arbitrary file read.",
    "suggestion": "Avoid using unvalidated input in file_get_contents."
  },
  {
    "id": "PHP-UNSERIALIZE-001",
    "language": "php",
    "category": "Insecure Deserialization",
    "owasp": "A08:2021-Software and Data Integrity Failures",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "unserialize\\s*\\(",
    "message": "Unserialize on untrusted input detected.",
    "suggestion": "Avoid unserialize(); use JSON instead, or validate strictly."
  },
  {
    "id": "PHP-MT-RAND-001",
    "language": "php",
    "category": "Weak Randomness",
    "owasp": "A02:2021-Cryptographic Failures",
    "severity": "MEDIUM",
    "type": "regex",
    "pattern": "mt_rand\\s*\\(",
    "message": "Use of mt_rand() for security tokens is unsafe.",
    "suggestion": "Use random_int() or random_bytes() instead."
  },
  {
    "id": "PHP-ECB-001",
    "language": "php",
    "category": "Weak Cryptography",
    "owasp": "A02:2021-Cryptographic Failures",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "openssl_encrypt\\s*\\(.*ecb",
    "message": "ECB mode detected. It leaks patterns in ciphertext.",
    "suggestion": "Use AES-GCM or AES-CBC with random IVs."
  },
  {
    "id": "PHP-HARDCODED-CREDS-001",
    "language": "php",
    "category": "Hardcoded Secrets",
    "owasp": "A02:2021-Cryptographic Failures",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "define\\s*\\(\\s*['\"]DB_(HOST|USER|PASS|NAME)",
    "message": "Hardcoded DB credentials detected.",
    "suggestion": "Use environment variables or secrets manager."
  },
  {
    "id": "PHP-UPLOAD-001",
    "language": "php",
    "category": "Insecure File Upload",
    "owasp": "A05:2021-Security Misconfiguration",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "move_uploaded_file\\s*\\(",
    "message": "File upload without validation detected.",
    "suggestion": "Validate file type, size, extension; randomize name; store outside web root."
  },
  {
    "id": "PHP-SESSION-001",
    "language": "php",
    "category": "Session Management",
    "owasp": "A07:2021-Identification and Authentication Failures",
    "severity": "MEDIUM",
    "type": "regex",
    "pattern": "setcookie\\s*\\(",
    "message": "Cookie set without Secure/HttpOnly/SameSite flags.",
    "suggestion": "Always set cookies with HttpOnly, Secure, and SameSite=strict."
  },
  {
    "id": "PHP-PREG-REPLACE-E-001",
    "language": "php",
    "category": "Dangerous Function",
    "owasp": "A03:2021-Injection",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "preg_replace\\s*\\([^)]*/e[^)]*\\)",
    "message": "preg_replace with /e modifier can execute code.",
    "suggestion": "Do not use /e; use preg_replace_callback instead."
  },
  {
    "id": "PHP-DL-001",
    "language": "php",
    "category": "Dangerous Function",
    "owasp": "A05:2021-Security Misconfiguration",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "dl\\s*\\(",
    "message": "dl() dynamically loads PHP extensions, unsafe in production.",
    "suggestion": "Do not use dl(); manage extensions in php.ini."
  },
  {
    "id": "PHP-SQLI-002",
    "language": "php",
    "category": "SQL Injection",
    "severity": "CRITICAL",
    "type": "regex",
    "pattern": "\\$_(GET|POST|REQUEST|COOKIE)\\s*\\[[^\\]]*\\][^;]*(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE)",
    "message": "Potential SQL injection vulnerability",
    "suggestion": "Use prepared statements or parameterized queries. Validate all inputs.",
    "cwe": "CWE-89",
    "owasp": "A03:2021-Injection"
  },
  {
    "id": "JS-DOMXSS-001",
    "language": "javascript",
    "category": "Cross-Site Scripting",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "\\.innerHTML\\s*=\\s*[^;]*(location\\.search|window\\.location|document\\.URL)",
    "message": "Potential DOM-based XSS vulnerability",
    "suggestion": "Use textContent or sanitize input (e.g. DOMPurify).",
    "cwe": "CWE-79",
    "owasp": "A03:2021-Injection"
  },
  {
    "id": "JS-DOCWRITE-001",
    "language": "javascript",
    "category": "Cross-Site Scripting",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "document\\.write\\s*\\([^)]*(location\\.search|window\\.location|document\\.URL)",
    "message": "document.write with user-controlled data",
    "suggestion": "Avoid document.write(); use DOM APIs and sanitize input.",
    "cwe": "CWE-79",
    "owasp": "A03:2021-Injection"
  },
  {
    "id": "JS-WEAK-RNG-001",
    "language": "javascript",
    "category": "Weak Randomness",
    "severity": "MEDIUM",
    "type": "regex",
    "pattern": "\\bMath\\.random\\s*\\(",
    "message": "Weak randomness with Math.random()",
    "suggestion": "Use crypto.getRandomValues() instead.",
    "cwe": "CWE-338",
    "owasp": "A02:2021-Cryptographic Failures"
  },
  {
    "id": "JS-CONSOLE-001",
    "language": "javascript",
    "category": "Information Disclosure",
    "severity": "LOW",
    "type": "regex",
    "pattern": "\\bconsole\\.(log|debug|info|warn|error)\\s*\\(",
    "message": "Console logging detected (informational).",
    "suggestion": "Remove console statements in production.",
    "cwe": "CWE-200",
    "owasp": "A09:2021-Security Logging and Monitoring Failures"
  },
  {
    "id": "JS-LOCALSTORAGE-001",
    "language": "javascript",
    "category": "Sensitive Data Exposure",
    "severity": "MEDIUM",
    "type": "regex",
    "pattern": "(localStorage|sessionStorage)\\.setItem\\s*\\([^)]*(password|token|key|secret)",
    "message": "Sensitive data stored in browser storage",
    "suggestion": "Do not store secrets in localStorage/sessionStorage. Use HttpOnly cookies.",
    "cwe": "CWE-922",
    "owasp": "A02:2021-Cryptographic Failures"
  },
  {
    "id": "JS-REDIRECT-001",
    "language": "javascript",
    "category": "Open Redirect",
    "severity": "MEDIUM",
    "type": "regex",
    "pattern": "window\\.location(?:\\.href)?\\s*=\\s*(location\\.search|window\\.location|document\\.URL)",
    "message": "Potential open redirect",
    "suggestion": "Validate redirect URLs against a whitelist.",
    "cwe": "CWE-601",
    "owasp": "A01:2021-Broken Access Control"
  },
  {
    "id": "JS-POSTMESSAGE-001",
    "language": "javascript",
    "category": "Message Handling",
    "severity": "MEDIUM",
    "type": "regex",
    "pattern": "window\\.addEventListener\\s*\\(\\s*['\"]message['\"]",
    "message": "postMessage listener detected; ensure origin validation.",
    "suggestion": "Always validate event.origin before handling messages.",
    "cwe": "CWE-346",
    "owasp": "A07:2021-Identification and Authentication Failures"
  },
  {
    "id": "JS-DOMXSS-AST-001",
    "language": "javascript",
    "category": "Cross-Site Scripting",
    "owasp": "A03:2021-Injection",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "AssignmentExpression",
    "calleeName": "innerHTML",
    "sources": ["document.location", "window.location", "location.search", "document.URL"],
    "message": "User input flows into innerHTML assignment → DOM XSS.",
    "suggestion": "Use textContent or sanitize with DOMPurify."
  },
  {
    "id": "PHP-SYSTEM-AST-001",
    "language": "php",
    "category": "Command Injection",
    "owasp": "A03:2021-Injection",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "system",
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "message": "system() called with user input → Command Injection.",
    "suggestion": "Avoid system(); use built-in APIs."
  },
  {
    "id": "PHP-EXEC-AST-001",
    "language": "php",
    "category": "Command Injection",
    "owasp": "A03:2021-Injection",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "exec",
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "message": "exec() called with user input → Command Injection.",
    "suggestion": "Avoid exec(); use built-in APIs."
  },
  {
    "id": "PHP-UNSERIALIZE-AST-001",
    "language": "php",
    "category": "Insecure Deserialization",
    "owasp": "A08:2021-Software and Data Integrity Failures",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "unserialize",
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "message": "unserialize() on user input → Insecure Deserialization.",
    "suggestion": "Do not unserialize untrusted input. Use JSON."
  },
  {
  "id": "PHP-AUTH-CHECK-001",
  "language": "php",
  "category": "Broken Access Control",
  "severity": "HIGH",
  "type": "regex",
  "pattern": "\\$_(GET|POST|REQUEST)\\s*\\[.*(role|admin|auth).*\\]",
  "message": "Access control decision appears to be based on user input.",
  "suggestion": "Enforce server-side authorization using session or token checks.",
  "owasp": "A01:2021-Broken Access Control"
},
{
  "id": "JS-CLIENT-AUTH-001",
  "language": "javascript",
  "category": "Broken Access Control",
  "severity": "MEDIUM",
  "type": "regex",
  "pattern": "if\\s*\\([^)]*(user\\s*\\.?role|currentUser\\s*\\.?role|user\\s*\\[\\s*['\"]role['\"]\\s*\\])[^)]*\\)",
  "message": "Authorization logic found in client-side code. This can be bypassed.",
  "suggestion": "Do not rely on client-side authorization checks. Always enforce access control on the server side.",
  "cwe": "CWE-602",
  "owasp": "A01:2021-Broken Access Control"
},{
  "id": "JS-CLIENT-AUTH-AST-001",
  "language": "javascript",
  "category": "Broken Access Control",
  "severity": "HIGH",
  "type": "ast",
  "nodeType": "IfStatement",
  "pattern": {
    "type": "MemberExpression",
    "object": {
      "type": "Identifier",
      "name": "user"
    },
    "property": {
      "type": "Identifier",
      "name": "role"
    }
  },
  "message": "Client-side role/authorization check detected. This can be bypassed.",
  "suggestion": "Enforce authorization logic only on the server. Remove or minimize client-side role checks.",
  "cwe": "CWE-602",
  "owasp": "A01:2021-Broken Access Control"
},
{
  "id": "PHP-HARDCODED-SECRET-002",
  "language": "php",
  "category": "Insecure Design",
  "severity": "HIGH",
  "type": "regex",
  "pattern": "(secret|apikey|token)\\s*=\\s*['\\\"]",
  "message": "Hardcoded secret or token detected.",
  "suggestion": "Use environment variables or a secrets manager.",
  "owasp": "A04:2021-Insecure Design"
},
{
  "id": "JS-DISABLE-CSP-001",
  "language": "javascript",
  "category": "Insecure Design",
  "severity": "HIGH",
  "type": "regex",
  "pattern": "(res\\.set(Header|HeaderSync)?\\s*\\([^)]*['\"]Content-Security-Policy['\"][^)]*unsafe-inline)",
  "message": "CSP with unsafe-inline detected. This weakens XSS protection.",
  "suggestion": "Avoid unsafe-inline; use nonces or hashes in CSP.",
  "cwe": "CWE-693",
  "owasp": "A04:2021-Insecure Design"
},
{
  "id": "JS-JQUERY-OLD-001",
  "language": "javascript",
  "category": "Outdated Components",
  "severity": "MEDIUM",
  "type": "regex",
  "pattern": "(jquery[-.]1\\.[0-9]+\\.[0-9]+(\\.min)?\\.js)",
  "message": "Old jQuery v1.x detected, which has multiple XSS vulnerabilities.",
  "suggestion": "Upgrade to the latest jQuery version (≥3.6.x).",
  "cwe": "CWE-1104",
  "owasp": "A06:2021-Vulnerable and Outdated Components"
}
,
{
  "id": "PHP-OUTDATED-MYSQL-001",
  "language": "php",
  "category": "Outdated Components",
  "severity": "HIGH",
  "type": "regex",
  "pattern": "mysql_connect\\s*\\(",
  "message": "Use of deprecated mysql_connect() detected.",
  "suggestion": "Migrate to PDO or mysqli with prepared statements.",
  "owasp": "A06:2021-Vulnerable and Outdated Components"
},
{
  "id": "PHP-SSRF-001",
  "language": "php",
  "category": "SSRF",
  "severity": "HIGH",
  "type": "regex",
  "pattern": "(curl_exec|file_get_contents|fopen)\\s*\\([^)]*http",
  "message": "Potential SSRF: fetching external URL without validation.",
  "suggestion": "Validate and whitelist remote URLs before requesting.",
  "owasp": "A10:2021-SSRF"
},
{
  "id": "JS-SSRF-001",
  "language": "javascript",
  "category": "Server-Side Request Forgery",
  "severity": "HIGH",
  "type": "regex",
  "pattern": "\\b(fetch|axios|get|post)\\s*\\([^)]*(req\\.|request\\.|user|query|params)",
  "message": "Potential SSRF: unvalidated user input flows into HTTP request.",
  "suggestion": "Validate and restrict request URLs against an allowlist.",
  "cwe": "CWE-918",
  "owasp": "A10:2021-SSRF"
},
{
  "id": "JS-SETTIMEOUT-AST-001",
  "language": "javascript",
  "category": "Dangerous Function",
  "owasp": "A03:2021-Injection",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "setTimeout",
  "argumentType": "Literal",
  "argumentPattern": ".*['\"].*",
  "message": "setTimeout called with a string argument → code execution risk.",
  "suggestion": "Use function references instead of strings."
},
{
  "id": "JS-SETINTERVAL-AST-001",
  "language": "javascript",
  "category": "Dangerous Function",
  "owasp": "A03:2021-Injection",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "setInterval",
  "argumentType": "Literal",
  "argumentPattern": ".*['\"].*",
  "message": "setInterval called with a string argument → code execution risk.",
  "suggestion": "Use function references instead of strings."
},
{
  "id": "JS-DOCWRITE-AST-001",
  "language": "javascript",
  "category": "Cross-Site Scripting",
  "owasp": "A03:2021-Injection",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "document.write",
  "sources": ["req.query", "req.body", "location.search", "window.location"],
  "message": "document.write with user-controlled input → possible DOM XSS.",
  "suggestion": "Avoid document.write(); use DOM APIs and sanitize input."
},
{
  "id": "JS-POSTMESSAGE-AST-001",
  "language": "javascript",
  "category": "Message Handling",
  "owasp": "A07:2021-Identification and Authentication Failures",
  "severity": "MEDIUM",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "postMessage",
  "requiresValidation": true,
  "message": "window.postMessage used without validating event.origin.",
  "suggestion": "Always validate event.origin before processing postMessage events."
}
,
  {
    "id": "PHP-UNSERIALIZE-AST-001",
    "language": "php",
    "category": "Insecure Deserialization",
    "owasp": "A08:2021-Software and Data Integrity Failures",
    "severity": "CRITICAL",
    "type": "ast",
    "nodeType": "call",
    "calleeName": "unserialize",
    "message": "unserialize() called in AST. Dangerous with untrusted input.",
    "suggestion": "Avoid unserialize(); prefer JSON or validate inputs."
  },
  {
    "id": "PHP-INCLUDE-AST-001",
    "language": "php",
    "category": "File Inclusion",
    "owasp": "A05:2021-Security Misconfiguration",
    "severity": "HIGH",
    "type": "ast",
    "nodeType": "include",
    "calleeName": "include/require",
    "message": "Dynamic include/require detected.",
    "suggestion": "Never use user input in include/require paths. Use whitelists."
  },
  {
    "id": "PHP-SETCOOKIE-AST-001",
    "language": "php",
    "category": "Session Management",
    "owasp": "A07:2021-Identification and Authentication Failures",
    "severity": "MEDIUM",
    "type": "ast",
    "nodeType": "call",
    "calleeName": "setcookie",
    "message": "Cookie set without Secure/HttpOnly/SameSite may be unsafe.",
    "suggestion": "Always set cookies with HttpOnly, Secure, and SameSite=strict."
  },
  {
    "id": "PHP-SYSTEM-TAINT-001",
    "language": "php",
    "category": "Command Injection",
    "owasp": "A03:2021-Injection",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "system",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "message": "system() called with user input → Command Injection.",
    "suggestion": "Avoid system(); use safer APIs or sanitize inputs."
  },
  {
    "id": "PHP-EXEC-TAINT-001",
    "language": "php",
    "category": "Command Injection",
    "owasp": "A03:2021-Injection",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "exec",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "message": "exec() called with user input → Command Injection.",
    "suggestion": "Avoid exec(); use safer APIs or sanitize inputs."
  },
  {
    "id": "PHP-MYSQLI-TAINT-001",
    "language": "php",
    "category": "SQL Injection",
    "owasp": "A03:2021-Injection",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "mysqli_query",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "message": "mysqli_query() with user input → SQL Injection.",
    "suggestion": "Always use prepared statements (mysqli_stmt or PDO)."
  },
  {
    "id": "PHP-INCLUDE-TAINT-001",
    "language": "php",
    "category": "File Inclusion",
    "owasp": "A05:2021-Security Misconfiguration",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "include",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "message": "include() with user input → Local/Remote File Inclusion.",
    "suggestion": "Never include user-controlled paths."
  },
  {
    "id": "PHP-UNSERIALIZE-TAINT-001",
    "language": "php",
    "category": "Insecure Deserialization",
    "owasp": "A08:2021-Software and Data Integrity Failures",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "unserialize",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "message": "unserialize() on user input → Insecure Deserialization.",
    "suggestion": "Do not unserialize untrusted input. Use JSON instead."
  },
  {
  "id": "JS-EVAL-TAINT-001",
  "language": "javascript",
  "category": "Code Injection",
  "owasp": "A03:2021-Injection",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "eval",
  "requiresTaint": true,
  "sources": ["document.location", "window.location", "location.search", "document.URL", "localStorage", "sessionStorage"],
  "message": "eval() with user input → Remote Code Execution.",
  "suggestion": "Avoid eval(); use JSON.parse or safe parsers."
},
{
  "id": "JS-INNERHTML-TAINT-001",
  "language": "javascript",
  "category": "Cross-Site Scripting",
  "owasp": "A03:2021-Injection",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "AssignmentExpression",
  "calleeName": "innerHTML",
  "requiresTaint": true,
  "sources": ["document.location", "window.location", "location.search", "document.URL", "localStorage", "sessionStorage"],
  "message": "User input flows into innerHTML → DOM XSS.",
  "suggestion": "Use textContent or sanitize with DOMPurify."
},
{
  "id": "JS-DOCWRITE-TAINT-001",
  "language": "javascript",
  "category": "Cross-Site Scripting",
  "owasp": "A03:2021-Injection",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "document.write",
  "requiresTaint": true,
  "sources": ["document.location", "window.location", "location.search", "document.URL", "localStorage", "sessionStorage"],
  "message": "document.write() with user input → DOM XSS.",
  "suggestion": "Avoid document.write(); use DOM APIs and sanitize input."
},
{
  "id": "JS-SETTIMEOUT-TAINT-001",
  "language": "javascript",
  "category": "Code Injection",
  "owasp": "A03:2021-Injection",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "setTimeout",
  "requiresTaint": true,
  "sources": ["document.location", "window.location", "location.search", "document.URL", "localStorage"],
  "message": "setTimeout() with user-controlled string → Code Execution.",
  "suggestion": "Always pass function references, not strings."
},
{
  "id": "JS-REDIRECT-TAINT-001",
  "language": "javascript",
  "category": "Open Redirect",
  "owasp": "A01:2021-Broken Access Control",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "AssignmentExpression",
  "calleeName": "window.location",
  "requiresTaint": true,
  "sources": ["document.location", "window.location", "location.search", "document.URL"],
  "message": "Unvalidated user input in redirect → Open Redirect.",
  "suggestion": "Validate URLs against a whitelist."
}
,
  {
    "id": "PHP-MOVE-UPLOAD-TAINT-001",
    "language": "php",
    "category": "Insecure File Upload",
    "owasp": "A05:2021-Security Misconfiguration",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "move_uploaded_file",
    "requiresTaint": true,
    "sources": ["$_FILES"],
    "message": "move_uploaded_file() without validation allows arbitrary file upload.",
    "suggestion": "Validate file type, size, and use randomized safe paths."
  },
  {
    "id": "PHP-HEADER-TAINT-001",
    "language": "php",
    "category": "HTTP Response Splitting",
    "owasp": "A03:2021-Injection",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "header",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "message": "header() with user input may lead to HTTP Response Splitting.",
    "suggestion": "Never pass raw user input to header()."
  },{
  "id": "JS-TIMEOUT-AST-001",
  "language": "javascript",
  "category": "Dangerous Function",
  "owasp": "A03:2021-Injection",
  "severity": "HIGH",
  "type": "ast",
  "nodeType": "CallExpression",
  "calleeName": "setTimeout",
  "argIsString": true,
  "message": "setTimeout called with a string → dynamic code execution like eval().",
  "suggestion": "Pass a function reference instead of a string."
},
{
  "id": "JS-INTERVAL-AST-001",
  "language": "javascript",
  "category": "Dangerous Function",
  "owasp": "A03:2021-Injection",
  "severity": "HIGH",
  "type": "ast",
  "nodeType": "CallExpression",
  "calleeName": "setInterval",
  "argIsString": true,
  "message": "setInterval called with a string → dynamic code execution like eval().",
  "suggestion": "Pass a function reference instead of a string."
},
{
  "id": "JS-LOCALSTORAGE-AST-001",
  "language": "javascript",
  "category": "Sensitive Data Exposure",
  "owasp": "A02:2021-Cryptographic Failures",
  "severity": "MEDIUM",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "setItem",
  "objectName": "localStorage",
  "sources": ["password", "token", "key", "secret"],
  "message": "Sensitive data stored in localStorage.",
  "suggestion": "Use HttpOnly cookies or secure storage, not localStorage/sessionStorage."
},
{
  "id": "JS-SESSIONSTORAGE-AST-001",
  "language": "javascript",
  "category": "Sensitive Data Exposure",
  "owasp": "A02:2021-Cryptographic Failures",
  "severity": "MEDIUM",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "setItem",
  "objectName": "sessionStorage",
  "sources": ["password", "token", "key", "secret"],
  "message": "Sensitive data stored in sessionStorage.",
  "suggestion": "Use HttpOnly cookies or secure storage, not localStorage/sessionStorage."
},
{
  "id": "JS-REDIRECT-AST-001",
  "language": "javascript",
  "category": "Open Redirect",
  "owasp": "A01:2021-Broken Access Control",
  "severity": "MEDIUM",
  "type": "context-ast",
  "nodeType": "AssignmentExpression",
  "calleeName": "window.location",
  "sources": ["document.location", "window.location", "location.search", "document.URL"],
  "message": "User-controlled data flows into window.location → Open Redirect.",
  "suggestion": "Validate redirect URLs against a whitelist."
}
,{
  "id": "PHP-MYSQLI-AST-001",
  "language": "php",
  "category": "SQL Injection",
  "owasp": "A03:2021-Injection",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "call",
  "calleeName": "mysqli_query",
  "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
  "message": "mysqli_query called with user input → SQL Injection.",
  "suggestion": "Always use prepared statements (mysqli_stmt or PDO)."
},
{
  "id": "PHP-INCLUDE-AST-001",
  "language": "php",
  "category": "File Inclusion",
  "owasp": "A05:2021-Security Misconfiguration",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "include",
  "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
  "message": "Dynamic include/require with user input → LFI/RFI.",
  "suggestion": "Never include user input in file paths; use whitelisted constants."
},
{
  "id": "PHP-FILE-READ-AST-001",
  "language": "php",
  "category": "Path Traversal",
  "owasp": "A05:2021-Security Misconfiguration",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "call",
  "calleeName": "file_get_contents",
  "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
  "message": "file_get_contents called with user input → Path Traversal.",
  "suggestion": "Never pass unvalidated input to file_get_contents."
},
{
  "id": "PHP-PREG-REPLACE-AST-001",
  "language": "php",
  "category": "Dangerous Function",
  "owasp": "A03:2021-Injection",
  "severity": "HIGH",
  "type": "ast",
  "nodeType": "call",
  "calleeName": "preg_replace",
  "patternCheck": "/e",
  "message": "preg_replace with /e modifier executes code → RCE risk.",
  "suggestion": "Use preg_replace_callback instead of /e."
},
{
  "id": "php-unserialize-user-input",
  "language": "php",
  "category": "deserialization",
  "owasp": "A08:2021 – Software and Data Integrity Failures",
  "severity": "high",
  "type": "regex",
  "pattern": "unserialize\\s*\\(\\s*\\$_(GET|POST|REQUEST)\\s*\\[.?\\]\\s\\)",
  "message": "Untrusted user input passed into unserialize() can lead to PHP Object Injection.",
  "suggestion": "Avoid unserialize() on user input. Use JSON with strict validation instead."
},
{
  "id": "php-preg-replace-eval",
  "language": "php",
  "category": "code-execution",
  "owasp": "A03:2021 – Injection",
  "severity": "critical",
  "type": "regex",
  "pattern": "preg_replace\\s*\\(.?/e.?,",
  "message": "Use of preg_replace with the /e modifier allows remote code execution.",
  "suggestion": "Remove /e modifier. Use preg_replace_callback instead."
},
{
  "id": "php-include-user-input",
  "language": "php",
  "category": "file-inclusion",
  "owasp": "A05:2021 – Security Misconfiguration",
  "severity": "critical",
  "type": "regex",
  "pattern": "(include|require)(once)?\\s*\\(\\s*\\$(GET|POST|REQUEST)\\s*\\[.?\\]\\s\\)",
  "message": "Dynamic file inclusion with user input may lead to LFI/RFI.",
  "suggestion": "Never pass user input directly into include/require. Use whitelists."
},
{
  "id": "php-header-injection",
  "language": "php",
  "category": "injection",
  "owasp": "A01:2021 – Broken Access Control",
  "severity": "high",
  "type": "regex",
  "pattern": "header\\s*\\(\\s*[\"']Location:.*\\$_(GET|POST|REQUEST)",
  "message": "Unvalidated redirects via header() can lead to Open Redirect or CRLF Injection.",
  "suggestion": "Sanitize and validate redirect URLs. Use a fixed set of allowed destinations."
},
{
  "id": "JS-DANGEROUSLY-SET-INNERHTML",
  "language": "javascript",
  "category": "Cross-Site Scripting",
  "owasp": "A03:2021-Injection",
  "severity": "HIGH",
  "type": "ast",
  "nodeType": "JSXAttribute",
  "attributeName": "dangerouslySetInnerHTML",
  "message": "Usage of dangerouslySetInnerHTML can lead to Cross-Site Scripting (XSS).",
  "suggestion": "Avoid dangerouslySetInnerHTML. Use safe templating libraries or sanitize HTML."
},
{
  "id": "JS-LOCALSTORAGE-SENSITIVE-DATA",
  "language": "javascript",
  "category": "Sensitive Data Exposure",
  "owasp": "A02:2021-Cryptographic Failures",
  "severity": "MEDIUM",
  "type": "regex",
  "pattern": "(localStorage|sessionStorage)\\.setItem\\s*\\(\\s*['\"](password|passwd|secret|token)['\"]",
  "message": "Storing sensitive data like passwords or tokens in local/sessionStorage is insecure.",
  "suggestion": "Use secure HTTP-only cookies or encrypted storage mechanisms."
},
{
  "id": "JS-CHILD-PROCESS-EXEC",
  "language": "javascript",
  "category": "Command Execution",
  "owasp": "A03:2021-Injection",
  "severity": "CRITICAL",
  "type": "regex",
  "pattern": "child_process\\.exec\\s*\\(",
  "message": "Use of child_process.exec() with user input may allow remote command execution.",
  "suggestion": "Use safer alternatives like execFile with strict input validation."
},
{
  "id": "JS-FS-PATH-TRAVERSAL",
  "language": "javascript",
  "category": "Path Traversal",
  "owasp": "A05:2021-Security Misconfiguration",
  "severity": "HIGH",
  "type": "regex",
  "pattern": "fs\\.(readFile|writeFile|appendFile)\\s*\\(\\s*req\\.(query|body|params)",
  "message": "Passing user input directly into fs operations may lead to path traversal attacks.",
  "suggestion": "Validate and sanitize file paths. Never use raw user input for filesystem access."
},
{
  "id": "JS-INSECURE-JWT-DECODE",
  "language": "javascript",
  "category": "Authentication",
  "owasp": "A07:2021-Identification and Authentication Failures",
  "severity": "HIGH",
  "type": "regex",
  "pattern": "jwt\\.decode\\s*\\(",
  "message": "Using jwt.decode() without verifying the signature is insecure.",
  "suggestion": "Use jwt.verify() instead of jwt.decode() for authentication flows."
},
{
  "id": "JS-INSECURE-TLS",
  "language": "javascript",
  "category": "Cryptographic Failures",
  "owasp": "A02:2021-Cryptographic Failures",
  "severity": "HIGH",
  "type": "regex",
  "pattern": "rejectUnauthorized\\s*:\\s*false",
  "message": "Disabling TLS verification (rejectUnauthorized: false) leaves the app vulnerable to MITM attacks.",
  "suggestion": "Always set rejectUnauthorized to true in production."
},
{
  "id": "JS-REGEX-DOS",
  "language": "javascript",
  "category": "Denial of Service",
  "owasp": "A09:2021-Security Logging and Monitoring Failures",
  "severity": "MEDIUM",
  "type": "regex",
  "pattern": "\\((?:\\w|\\.)+\\+\\)\\+",
  "message": "Detected vulnerable regex pattern with nested quantifiers (ReDoS).",
  "suggestion": "Refactor regex to avoid catastrophic backtracking."
},
{
  "id": "JS-OUTERHTML-ASSIGNMENT",
  "language": "javascript",
  "category": "Cross-Site Scripting",
  "owasp": "A03:2021-Injection",
  "severity": "HIGH",
  "type": "ast",
  "nodeType": "AssignmentExpression",
  "propertyName": "outerHTML",
  "message": "Assignment to outerHTML with user input can lead to Cross-Site Scripting (XSS).",
  "suggestion": "Use textContent or sanitize input before assigning to outerHTML."
},
{
  "id": "JS-INSERTADJACENTHTML",
  "language": "javascript",
  "category": "Cross-Site Scripting",
  "owasp": "A03:2021-Injection",
  "severity": "HIGH",
  "type": "ast",
  "nodeType": "CallExpression",
  "calleeName": "insertAdjacentHTML",
  "message": "Usage of insertAdjacentHTML with unsanitized input can lead to Cross-Site Scripting (XSS).",
  "suggestion": "Sanitize HTML or avoid insertAdjacentHTML."
},
{
  "id": "JS-WINDOW-LOCATION-ASSIGN",
  "language": "javascript",
  "category": "Open Redirect",
  "owasp": "A01:2021-Broken Access Control",
  "severity": "HIGH",
  "type": "ast",
  "nodeType": "AssignmentExpression",
  "propertyName": "location",
  "message": "Assignment to window.location with unsanitized input can lead to open redirect attacks.",
  "suggestion": "Validate destination URLs or use a whitelist."
},
{
  "id": "JS-DOCUMENT-COOKIE-ASSIGN",
  "language": "javascript",
  "category": "Cross-Site Scripting",
  "owasp": "A03:2021-Injection",
  "severity": "MEDIUM",
  "type": "ast",
  "nodeType": "AssignmentExpression",
  "propertyName": "cookie",
  "message": "Direct assignment to document.cookie may allow persistent XSS or session hijacking.",
  "suggestion": "Avoid setting cookies via JS. Use HttpOnly and Secure flags in server-set cookies."
}
,
{
  "id": "php-eval-nonliteral",
  "language": "php",
  "category": "code-execution",
  "owasp": "A03:2021 – Injection",
  "severity": "critical",
  "type": "ast",
  "nodeType": "FunctionCall",
  "calleeName": "eval",
  "argumentType": "variable",
  "message": "Use of eval() with a non-literal argument can lead to remote code execution.",
  "suggestion": "Avoid eval(). If dynamic code execution is unavoidable, strictly validate inputs."
},
{
  "id": "php-system-exec-taint",
  "language": "php",
  "category": "command-injection",
  "owasp": "A03:2021 – Injection",
  "severity": "critical",
  "type": "context-ast",
  "nodeType": "FunctionCall",
  "calleeName": "system",
  "requiresTaint": true,
  "sources": ["$_GET", "$_POST", "$_REQUEST"],
  "message": "User input passed directly to system() may allow OS command injection.",
  "suggestion": "Avoid system() with untrusted data. Use escapeshellarg/escapeshellcmd and strict validation."
},{
  "id": "JS-EVAL-TAINT-001",
  "language": "javascript",
  "category": "Code Injection",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-94",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "eval",
  "requiresTaint": true,
  "sources": ["req.query", "req.body", "req.params", "document.location", "window.location", "localStorage"],
  "message": "User-controlled input passed into eval(), leading to RCE.",
  "suggestion": "Avoid eval(); use safe parsing or whitelisted function maps."
},
{
  "id": "JS-INNERHTML-TAINT-001",
  "language": "javascript",
  "category": "Cross-Site Scripting",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "AssignmentExpression",
  "propertyName": "innerHTML",
  "requiresTaint": true,
  "sources": ["req.query", "req.body", "req.params", "document.location", "window.location", "localStorage"],
  "message": "User-controlled input written into innerHTML may cause XSS.",
  "suggestion": "Use textContent instead, or sanitize input before inserting into DOM."
},
{
  "id": "JS-FETCH-SSRF-002",
  "language": "javascript",
  "category": "SSRF",
  "owasp": "A10:2021-SSRF",
  "cwe": "CWE-918",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "fetch",
  "requiresTaint": true,
  "sources": ["req.query", "req.body", "req.params"],
  "message": "fetch() called with user input as URL → possible SSRF.",
  "suggestion": "Restrict allowed domains and validate URLs before making requests."
}
,
  {
    "id": "PHP-EXEC-TAINT-001",
    "language": "php",
    "category": "Command Injection",
    "owasp": "A03:2021-Injection",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": ["exec", "system", "shell_exec", "passthru", "popen"],
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "message": "User input passed to system command execution function.",
    "suggestion": "Never pass unsanitized input to system commands; use escapeshellarg or safer APIs."
  },
  {
    "id": "PHP-HEADER-TAINT-002",
    "language": "php",
    "category": "HTTP Response Splitting",
    "owasp": "A03:2021-Injection",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "header",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "message": "User input in header() may lead to HTTP response splitting.",
    "suggestion": "Validate and sanitize all input passed to header()."
  },
  {
    "id": "PHP-CURL-SSRF-002",
    "language": "php",
    "category": "SSRF",
    "owasp": "A10:2021-Server-Side Request Forgery",
    "severity": "HIGH",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": ["curl_exec", "file_get_contents"],
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "message": "Untrusted input flows into network request function → SSRF possible.",
    "suggestion": "Validate and whitelist URLs before making external requests."
  },
  {
    "id": "PHP-FILE-INCLUDE-TAINT-001",
    "language": "php",
    "category": "File Inclusion",
    "owasp": "A03:2021-Injection",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": ["include", "require", "include_once", "require_once"],
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "message": "User-controlled file path in include/require may lead to LFI/RFI.",
    "suggestion": "Never allow raw input in file paths; use whitelists or constants."
  },{
  "id": "JS-DOC-WRITE-TAINT-001",
  "language": "javascript",
  "category": "DOM XSS",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "document.write",
  "requiresTaint": true,
  "sources": ["document.location", "window.location", "req.query", "req.body"],
  "message": "document.write() with user input allows XSS.",
  "suggestion": "Avoid document.write(); use DOM APIs with sanitized content."
},
{
  "id": "JS-SETTIMEOUT-TAINT-001",
  "language": "javascript",
  "category": "Code Injection",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-94",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": ["setTimeout", "setInterval"],
  "argIsString": true,
  "requiresTaint": true,
  "sources": ["req.query", "req.body", "document.location"],
  "message": "User-controlled strings in setTimeout/setInterval can lead to code execution.",
  "suggestion": "Pass function references instead of strings."
},
{
  "id": "JS-LOCALSTORAGE-TAINT-001",
  "language": "javascript",
  "category": "Sensitive Data Exposure",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-922",
  "severity": "MEDIUM",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "setItem",
  "objectName": "localStorage",
  "requiresTaint": true,
  "sources": ["req.body.password", "req.body.token", "req.body.secret", "req.body.key"],
  "message": "Sensitive data stored in localStorage can be stolen via XSS.",
  "suggestion": "Avoid storing tokens/passwords in localStorage; use HttpOnly cookies."
}
,{
    "id": "PHP-MYSQL-QUERY-TAINT-001",
    "language": "php",
    "category": "SQL Injection",
    "owasp": "A03:2021-Injection",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": ["mysql_query", "mysqli_query", "pg_query"],
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "message": "User input flows into raw SQL execution function.",
    "suggestion": "Use prepared statements with parameterized queries."
  },
  {
    "id": "PHP-UNSERIALIZE-TAINT-001",
    "language": "php",
    "category": "Object Injection",
    "owasp": "A08:2021-Software and Data Integrity Failures",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "unserialize",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "message": "Untrusted input passed into unserialize() may allow object injection.",
    "suggestion": "Avoid unserialize() on untrusted data; use JSON instead."
  },
  {
    "id": "PHP-MOVE-UPLOAD-TAINT-001",
    "language": "php",
    "category": "Unrestricted File Upload",
    "owasp": "A05:2021-Security Misconfiguration",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "move_uploaded_file",
    "requiresTaint": true,
    "sources": ["$_FILES"],
    "message": "File uploaded without proper checks → may lead to RCE.",
    "suggestion": "Validate file type, enforce safe directory, and rename uploaded files."
  },{
  "id": "JS-CTX-001",
  "language": "javascript",
  "type": "context-ast",
  "category": "DOM XSS",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79",
  "severity": "HIGH",
  "message": "Assignment to innerHTML with user-controlled data.",
  "suggestion": "Avoid assigning untrusted data to innerHTML. Use safe DOM methods or sanitization.",
  "nodeType": "AssignmentExpression",
  "propertyName": "innerHTML",
  "requiresTaint": true,
  "sources": ["document.cookie", "location", "window.name", "localStorage", "sessionStorage", "req.body", "req.query", "input"]
},
{
  "id": "JS-CTX-002",
  "language": "javascript",
  "type": "context-ast",
  "category": "Code Injection",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-94",
  "severity": "CRITICAL",
  "message": "Dangerous dynamic code execution (setTimeout/setInterval) with untrusted input.",
  "suggestion": "Avoid passing untrusted input to code execution APIs. Always pass function references instead of strings.",
  "nodeType": "CallExpression",
  "calleeName": ["setTimeout", "setInterval"],
  "argIsString": true,
  "requiresTaint": true,
  "sources": ["document.cookie", "location", "req.body", "req.query", "input"]
},
{
  "id": "JS-CTX-003",
  "language": "javascript",
  "type": "context-ast",
  "category": "Code Injection",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-95",
  "severity": "CRITICAL",
  "message": "Dynamic function creation from untrusted input.",
  "suggestion": "Do not use new Function with untrusted data.",
  "nodeType": "NewExpression",
  "calleeName": "Function",
  "requiresTaint": true,
  "sources": ["document.cookie", "location", "req.body", "req.query", "input"]
}
,
  {
    "id": "PHP-CTX-001",
    "language": "php",
    "type": "context-ast",
    "category": "File Inclusion",
    "severity": "CRITICAL",
    "message": "File include/require uses untrusted input.",
    "suggestion": "Do not include files based on user input. Use whitelisted paths.",
    "nodeType": "include",
    "sources": ["$_GET", "$_POST", "$_REQUEST"]
  },
  {
    "id": "PHP-CTX-002",
    "language": "php",
    "type": "context-ast",
    "category": "Command Injection",
    "severity": "CRITICAL",
    "message": "Command execution with user input.",
    "suggestion": "Avoid passing user input into system(), exec(), or similar.",
    "nodeType": "call",
    "calleeName": "system",
    "sources": ["$_GET", "$_POST", "$_REQUEST"]
  },{
  "id": "JS-DOMXSS-001",
  "language": "javascript",
  "category": "Cross-Site Scripting",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "AssignmentExpression",
  "propertyName": "innerHTML",
  "requiresTaint": true,
  "sources": ["document.location", "location.search", "location.hash"],
  "message": "User input flows into innerHTML → DOM XSS.",
  "suggestion": "Use textContent or sanitize with DOMPurify."
},
{
  "id": "JS-DOMXSS-002",
  "language": "javascript",
  "category": "Cross-Site Scripting",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "insertAdjacentHTML",
  "requiresTaint": true,
  "sources": ["document.location", "location.search"],
  "message": "User input flows into insertAdjacentHTML → DOM XSS.",
  "suggestion": "Use DOM APIs safely or sanitize with DOMPurify."
},
{
  "id": "JS-DOMXSS-003",
  "language": "javascript",
  "category": "Cross-Site Scripting",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "objectName": "document",
  "calleeName": "write",
  "requiresTaint": true,
  "sources": ["document.location", "window.location", "req.query", "req.body"],
  "message": "User input passed to document.write → DOM XSS.",
  "suggestion": "Avoid document.write; use safe DOM methods."
},
{
  "id": "JS-EVAL-001",
  "language": "javascript",
  "category": "Code Injection",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-94",
  "severity": "CRITICAL",
  "type": "ast",
  "nodeType": "CallExpression",
  "calleeName": "eval",
  "message": "Use of eval() can lead to code execution.",
  "suggestion": "Avoid eval(); use safe parsers or functions."
},
{
  "id": "JS-FUNCTION-001",
  "language": "javascript",
  "category": "Code Injection",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-95",
  "severity": "CRITICAL",
  "type": "ast",
  "nodeType": "NewExpression",
  "calleeName": "Function",
  "message": "Use of Function constructor is dangerous.",
  "suggestion": "Avoid Function(); use safer alternatives."
},
{
  "id": "JS-SETTIMEOUT-001",
  "language": "javascript",
  "category": "Code Injection",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-94",
  "severity": "HIGH",
  "type": "ast",
  "nodeType": "CallExpression",
  "calleeName": "setTimeout",
  "argIsString": true,
  "message": "setTimeout with string executes code.",
  "suggestion": "Use function callbacks instead of string arguments."
},
{
  "id": "JS-OPENREDIRECT-001",
  "language": "javascript",
  "category": "Open Redirect",
  "owasp": "A01:2021-Broken Access Control",
  "cwe": "CWE-601",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "AssignmentExpression",
  "propertyName": "href",
  "requiresTaint": true,
  "sources": ["req.query", "req.body", "document.location"],
  "message": "User input assigned to location.href → Open Redirect.",
  "suggestion": "Validate URLs against an allowlist."
},
{
  "id": "JS-FETCH-001",
  "language": "javascript",
  "category": "SSRF / Data Exfiltration",
  "owasp": "A10:2021-SSRF",
  "cwe": "CWE-918",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "fetch",
  "requiresTaint": true,
  "sources": ["req.query", "req.body"],
  "message": "User-controlled fetch() may allow SSRF or data exfiltration.",
  "suggestion": "Validate destination URLs and restrict domains."
},
{
  "id": "JS-LOCALSTORAGE-001",
  "language": "javascript",
  "category": "Sensitive Data Exposure",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-922",
  "severity": "MEDIUM",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "objectName": "localStorage",
  "calleeName": "setItem",
  "requiresTaint": true,
  "sources": ["req.body.password", "req.body.token"],
  "message": "Sensitive data stored in localStorage.",
  "suggestion": "Use HttpOnly cookies instead."
},
{
  "id": "JS-COOKIE-001",
  "language": "javascript",
  "category": "Weak Cookie Flags",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-614",
  "severity": "MEDIUM",
  "type": "ast",
  "nodeType": "AssignmentExpression",
  "propertyName": "cookie",
  "objectName": "document",
  "message": "Cookies set without Secure/SameSite → insecure.",
  "suggestion": "Always set Secure, HttpOnly, SameSite."
},
{
  "id": "JS-RANDOM-001",
  "language": "javascript",
  "category": "Insecure Randomness",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-338",
  "severity": "LOW",
  "type": "ast",
  "nodeType": "CallExpression",
  "objectName": "Math",
  "calleeName": "random",
  "message": "Math.random() used for security token → predictable.",
  "suggestion": "Use crypto.getRandomValues() instead."
},
{
  "id": "JS-PROTOTYPE-001",
  "language": "javascript",
  "category": "Prototype Pollution",
  "owasp": "A08:2021-Deserialization",
  "cwe": "CWE-1321",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "JSON.parse",
  "requiresTaint": true,
  "sources": ["req.body", "req.query"],
  "message": "User-controlled JSON merged → Prototype Pollution.",
  "suggestion": "Block __proto__ and constructor keys."
},
{
  "id": "JS-HANDLER-001",
  "language": "javascript",
  "category": "Event Handler Injection",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-94",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "setAttribute",
  "requiresTaint": true,
  "sources": ["req.query", "req.body"],
  "message": "Untrusted input assigned to event handler → Code execution.",
  "suggestion": "Do not set inline event handlers from untrusted input."
},
{
  "id": "JS-REDOS-001",
  "language": "javascript",
  "category": "ReDoS",
  "owasp": "A06:2021-DoS",
  "cwe": "CWE-400",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "NewExpression",
  "calleeName": "RegExp",
  "requiresTaint": true,
  "sources": ["req.query", "req.body"],
  "message": "User-controlled regex pattern may cause ReDoS.",
  "suggestion": "Validate regex input or use safe-regex libraries."
},
{
  "id": "JS-POSTMESSAGE-001",
  "language": "javascript",
  "category": "Message Handling",
  "owasp": "A07:2021-Identification and Authentication Failures",
  "cwe": "CWE-807",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "objectName": "window",
  "calleeName": "addEventListener",
  "event": "message",
  "message": "postMessage handler found. Ensure no eval() or unsafe dynamic execution inside.",
  "suggestion": "Validate origin and sanitize message data."
},
{
  "id": "JS-HREFHTML-001",
  "language": "javascript",
  "category": "Cross-Site Scripting",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "AssignmentExpression",
  "propertyName": "innerHTML",
  "requiresTaint": true,
  "sources": ["req.query.url", "req.body.url"],
  "message": "User-controlled href inserted into innerHTML → DOM XSS.",
  "suggestion": "Use safe DOM APIs and validate URLs."
},
{
  "id": "JS-STYLE-001",
  "language": "javascript",
  "category": "CSS Injection",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-74",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "setAttribute",
  "requiresTaint": true,
  "sources": ["req.query", "req.body"],
  "message": "Untrusted input flows into style attribute → CSS Injection.",
  "suggestion": "Validate or sanitize style values."
},
{
  "id": "JS-HEADERS-001",
  "language": "javascript",
  "category": "Header Injection",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-113",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "fetch",
  "requiresTaint": true,
  "sources": ["req.headers", "req.query", "req.body"],
  "message": "User input flows into HTTP header value → Header Injection.",
  "suggestion": "Validate header values before use."
},
{
  "id": "JS-INNERHTML-PLUS-001",
  "language": "javascript",
  "category": "Cross-Site Scripting",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "AssignmentExpression",
  "propertyName": "innerHTML",
  "operator": "+=",
  "requiresTaint": true,
  "sources": ["req.query", "req.body"],
  "message": "innerHTML += with user input → DOM XSS.",
  "suggestion": "Avoid innerHTML concatenation; use DOM APIs."
},
{
  "id": "JS-JSURL-001",
  "language": "javascript",
  "category": "JavaScript URL Injection",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "AssignmentExpression",
  "propertyName": "href",
  "requiresTaint": true,
  "sources": ["req.query.url", "req.body.url"],
  "message": "User-controlled javascript: URL assigned to href → XSS.",
  "suggestion": "Disallow javascript: schemes in URLs."
},
{
  "id": "GEN-HEUR-001",
  "language": "javascript",
  "type": "heuristic",
  "category": "Debugging",
  "pattern": "console\\.log",
  "severity": "LOW",
  "message": "Debug logging function found (console.log).",
  "suggestion": "Remove debug statements before deploying to production.",
  "owasp": "A09:2021-Security Logging and Monitoring Failures"
}
,
  {
    "id": "PHP-HEUR-002",
    "language": "php",
    "type": "heuristic",
    "category": "Debugging",
    "pattern": "var_dump|print_r|die\\(",
    "severity": "LOW",
    "message": "Debugging functions found in PHP code.",
    "suggestion": "Remove debug functions before deploying to production.",
    "owasp": "A10:2021 - Logging & Monitoring Failures"
  },
  {
  "id": "GEN-HEUR-003",
  "language": "javascript",
  "type": "heuristic",
  "category": "Secrets",
  "pattern": "(api[_-]?key|secret|password|auth[_-]?token)",
  "severity": "HIGH",
  "cwe": "CWE-798",
  "message": "Possible hardcoded secret or credential detected.",
  "suggestion": "Do not hardcode secrets. Move them to environment variables or a secure vault.",
  "owasp": "A02:2021-Cryptographic Failures"
}
,
  {
    "id": "PHP-HEUR-004",
    "language": "php",
    "type": "heuristic",
    "category": "Permissions",
    "pattern": "chmod\\(.*777",
    "severity": "MEDIUM",
    "message": "File permission set to 777 (world-writable).",
    "suggestion": "Restrict permissions to the minimum required (e.g., 640 or 750).",
    "owasp": "A05:2021 - Security Misconfiguration"
  },
  {
  "id": "GEN-HEUR-005",
  "language": "javascript",
  "type": "heuristic",
  "category": "Insecure Config",
  "pattern": "NODE_TLS_REJECT_UNAUTHORIZED\\s*=?\\s*['\"]?0['\"]?",
  "severity": "HIGH",
  "cwe": "CWE-295",
  "message": "TLS certificate validation is disabled via NODE_TLS_REJECT_UNAUTHORIZED=0.",
  "suggestion": "Enable TLS verification to prevent MITM attacks. Do not disable NODE_TLS_REJECT_UNAUTHORIZED in production.",
  "owasp": "A05:2021-Security Misconfiguration"
}
,
  {
    "id": "PHP-HEUR-006",
    "language": "php",
    "type": "heuristic",
    "category": "Insecure Config",
    "pattern": "CURLOPT_SSL_VERIFYPEER\\s*,\\s*false",
    "severity": "HIGH",
    "message": "SSL peer verification is disabled in cURL.",
    "suggestion": "Enable CURLOPT_SSL_VERIFYPEER to ensure secure HTTPS connections.",
    "owasp": "A05:2021 - Security Misconfiguration"
  },
  {
  "id": "GEN-HEUR-007",
  "language": "javascript",
  "type": "heuristic",
  "category": "Suspicious Comments",
  "pattern": "(//|/\\*+).*\\b(TODO|FIXME|HACK|TEMP|WORKAROUND)\\b",
  "severity": "LOW",
  "message": "Suspicious comment keyword found.",
  "suggestion": "Review and resolve temporary or insecure code before production.",
  "owasp": "A10:2021-Logging & Monitoring Failures"
},
{
  "id": "GEN-HEUR-008",
  "language": "javascript",
  "type": "heuristic",
  "category": "Obfuscation",
  "pattern": "[A-Za-z0-9+/]{200,}={0,2}",
  "severity": "MEDIUM",
  "message": "Very large base64/encoded string detected (possible obfuscation or embedded payload).",
  "suggestion": "Review encoded content carefully for hidden or malicious data.",
  "owasp": "A04:2021-Insecure Design"
}
,
  {
    "id": "GEN-HEUR-009",
    "language": "php",
    "type": "heuristic",
    "category": "Secrets",
    "pattern": "define\\(['\"]?(DB_PASSWORD|DB_USER|DB_HOST)['\"]?",
    "severity": "HIGH",
    "message": "Hardcoded database credentials detected.",
    "suggestion": "Store DB credentials in environment variables or secure vault.",
    "owasp": "A02:2021 - Cryptographic Failures"
  },
  {
  "id": "GEN-HEUR-010",
  "language": "javascript",
  "type": "heuristic",
  "category": "Weak Crypto",
  "pattern": "\\b(md5|sha1)\\s*\\(",
  "severity": "MEDIUM",
  "message": "Weak cryptographic function detected (MD5/SHA1).",
  "suggestion": "Use SHA-256, SHA-3, or stronger hashing algorithms.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-327"
}
,
  {
    "id": "PHP-HEUR-011",
    "language": "php",
    "type": "heuristic",
    "category": "Weak Crypto",
    "pattern": "md5\\(|sha1\\(",
    "severity": "MEDIUM",
    "message": "Weak cryptographic function detected in PHP.",
    "suggestion": "Use password_hash() or libsodium for secure hashing.",
    "owasp": "A02:2021 - Cryptographic Failures"
  },
  {
  "id": "GEN-HEUR-012",
  "language": "javascript",
  "type": "heuristic",
  "category": "Exception Handling",
  "pattern": "catch\\s*\\([^)]*\\)\\s*\\{\\s*\\}",
  "severity": "LOW",
  "message": "Empty catch block found, errors may be silently ignored.",
  "suggestion": "Log, rethrow, or handle exceptions securely instead of swallowing them.",
  "owasp": "A09:2021-Security Logging and Monitoring Failures",
  "cwe": "CWE-391"
}
,
  {
    "id": "PHP-HEUR-013",
    "language": "php",
    "type": "heuristic",
    "category": "Error Handling",
    "pattern": "error_reporting\\(0\\)|ini_set\\(['\"]display_errors['\"],\\s*['\"]Off['\"]\\)",
    "severity": "LOW",
    "message": "Error reporting suppressed.",
    "suggestion": "Do not disable error reporting completely; log securely instead.",
    "owasp": "A09:2021 - Security Logging and Monitoring Failures"
  },
  {
  "id": "GEN-HEUR-014",
  "language": "javascript",
  "type": "heuristic",
  "category": "Hardcoded URLs",
  "pattern": "['\"`]http://[\\w./?#=&%-]+",
  "severity": "MEDIUM",
  "message": "Use of insecure hardcoded HTTP URL detected.",
  "suggestion": "Use HTTPS for secure communication instead of HTTP.",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-319"
}
,
  {
    "id": "GEN-HEUR-015",
    "language": "php",
    "type": "heuristic",
    "category": "Hardcoded URLs",
    "pattern": "http://",
    "severity": "MEDIUM",
    "message": "Use of insecure HTTP URL in PHP.",
    "suggestion": "Always use HTTPS instead of HTTP.",
    "owasp": "A05:2021 - Security Misconfiguration"
  },
  {
  "id": "GEN-HEUR-016",
  "language": "javascript",
  "type": "heuristic",
  "category": "Temporary Files",
  "pattern": "\\b(tmp|temp)\\b",
  "severity": "LOW",
  "message": "Use of temporary file/directory detected.",
  "suggestion": "Ensure temporary files are created securely and not world-accessible.",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-377"
}
,
  {
    "id": "GEN-HEUR-017",
    "language": "php",
    "type": "heuristic",
    "category": "File Handling",
    "pattern": "fopen\\(|fwrite\\(",
    "severity": "MEDIUM",
    "message": "Direct file operations detected.",
    "suggestion": "Validate file paths and use secure file APIs.",
    "owasp": "A05:2021 - Security Misconfiguration"
  },
  {
  "id": "GEN-HEUR-018",
  "language": "javascript",
  "type": "heuristic",
  "category": "Obfuscation",
  "pattern": "eval\\s*\\(\\s*atob\\s*\\(",
  "severity": "HIGH",
  "message": "Obfuscated eval with base64 decoding detected.",
  "suggestion": "Avoid obfuscation techniques like eval(atob()), as they hide potentially malicious code.",
  "owasp": "A08:2021-Software Integrity Failures",
  "cwe": "CWE-94"
}
,
  {
    "id": "GEN-HEUR-019",
    "language": "php",
    "type": "heuristic",
    "category": "Insecure Functions",
    "pattern": "create_function\\(",
    "severity": "HIGH",
    "message": "Deprecated and insecure function create_function() used.",
    "suggestion": "Use anonymous functions instead.",
    "owasp": "A08:2021 - Software Integrity Failures"
  },
  {
  "id": "GEN-HEUR-020",
  "language": "javascript",
  "type": "heuristic",
  "category": "Sensitive Data Exposure",
  "pattern": "document\\.cookie",
  "severity": "MEDIUM",
  "message": "Use of document.cookie detected. Direct access can expose sensitive data and is prone to XSS/session hijacking.",
  "suggestion": "Avoid using document.cookie directly; use HttpOnly, Secure, SameSite flags or secure storage mechanisms.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-315"
}
,
  {
    "id": "PHP-HEUR-021",
    "language": "php",
    "type": "heuristic",
    "category": "Superglobals",
    "pattern": "\\$_REQUEST",
    "severity": "MEDIUM",
    "message": "Use of PHP superglobal $_REQUEST detected.",
    "suggestion": "Use $_GET or $_POST explicitly and validate input.",
    "owasp": "A01:2021 - Broken Access Control"
  },
  {
  "id": "GEN-HEUR-022",
  "language": "javascript",
  "type": "heuristic",
  "category": "Code Injection",
  "pattern": "setTimeout\\s*\\(\\s*['\"`]|setInterval\\s*\\(\\s*['\"`]",
  "severity": "HIGH",
  "message": "setTimeout/setInterval called with a string argument → possible code injection.",
  "suggestion": "Pass a function reference instead of a string to setTimeout/setInterval.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-95"
}
,
  {
    "id": "PHP-HEUR-023",
    "language": "php",
    "type": "heuristic",
    "category": "Session Handling",
    "pattern": "session_start\\(",
    "severity": "LOW",
    "message": "Session start detected, ensure secure flags are set.",
    "suggestion": "Use secure session cookies (HttpOnly, Secure, SameSite).",
    "owasp": "A07:2021 - Identification and Authentication Failures"
  },
  {
  "id": "GEN-HEUR-024",
  "language": "javascript",
  "type": "heuristic",
  "category": "DOM XSS / Dangerous Function",
  "pattern": "document\\.write",
  "severity": "HIGH",
  "message": "Use of document.write() can enable DOM XSS and is considered unsafe.",
  "suggestion": "Avoid document.write(); use safe DOM manipulation APIs instead.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79"
}
,
  {
    "id": "PHP-HEUR-025",
    "language": "php",
    "type": "heuristic",
    "category": "Insecure Config",
    "pattern": "allow_url_fopen\\s*=\\s*On",
    "severity": "HIGH",
    "message": "allow_url_fopen is enabled, may allow RFI attacks.",
    "suggestion": "Disable allow_url_fopen unless absolutely necessary.",
    "owasp": "A05:2021 - Security Misconfiguration"
  },{
    "id": "PHP-HARDCODED-CREDS-001",
    "language": "php",
    "type": "heuristic",
    "pattern": "\\$username\\s*=\\s*['\\\"]root['\\\"]",
    "severity": "HIGH",
    "category": "Sensitive Info Disclosure",
    "message": "Hardcoded database username detected.",
    "suggestion": "Use environment variables or config files instead of hardcoding credentials.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-798"
  },
  {
    "id": "PHP-NO-DB-ERROR-HANDLING-001",
    "language": "php",
    "type": "heuristic",
    "pattern": "new\\s+mysqli\\(",
    "severity": "MEDIUM",
    "category": "Error Handling",
    "message": "Database connection created without proper error handling.",
    "suggestion": "Always wrap database connections in try/catch and log errors securely.",
    "owasp": "A09:2021-Security Logging and Monitoring Failures",
    "cwe": "CWE-252"
  },
  {
    "id": "PHP-SQL-INJECTION-001",
    "language": "php",
    "type": "heuristic",
    "pattern": "\\$sql\\s*=\\s*\\\"SELECT.*\\$_GET",
    "severity": "CRITICAL",
    "category": "Injection",
    "message": "Possible SQL injection detected with unsanitized user input in SQL query.",
    "suggestion": "Use prepared statements or parameterized queries instead of directly embedding user input.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-89"
  },{
  "id": "JS-EVAL-TAINT",
  "language": "javascript",
  "category": "Code Injection",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-95",
  "severity": "CRITICAL",
  "type": "taint-ast",
  "sources": [
    "req.query",
    "req.body",
    "window.location",
    "document.cookie",
    "localStorage",
    "sessionStorage"
  ],
  "sinks": ["eval", "Function", "setTimeout", "setInterval"],
  "conditions": {
    "setTimeout": "argumentType == string",
    "setInterval": "argumentType == string"
  },
  "message": "User-controlled input flows into eval() or dynamic code execution.",
  "suggestion": "Avoid eval()/Function; use safe alternatives like JSON.parse or predefined function maps."
}
,
  {
    "id": "PHP-EVAL-TAINT",
    "language": "php",
    "category": "Code Injection",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-95",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE", "$_SERVER"],
    "sinks": ["eval", "system", "exec", "shell_exec", "passthru", "popen"],
    "message": "User-controlled input flows into a dangerous PHP function.",
    "suggestion": "Avoid dangerous functions with raw user input. Sanitize or use safer APIs."
  },
  {
    "id": "PHP-SQL-TAINT",
    "language": "php",
    "category": "SQL Injection",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-89",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "sinks": ["mysql_query", "mysqli_query", "pdo->query", "->exec"],
    "message": "User-controlled input flows into SQL query without sanitization.",
    "suggestion": "Use prepared statements (parameterized queries)."
  },
  {
    "id": "JS-DOM-XSS-TAINT",
    "language": "javascript",
    "category": "Cross-Site Scripting",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-79",
    "severity": "HIGH",
    "type": "taint-ast",
    "sources": ["req.query", "req.body", "location.hash", "document.cookie", "localStorage", "sessionStorage"],
    "sinks": ["innerHTML", "outerHTML", "insertAdjacentHTML", "document.write"],
    "message": "User-controlled input flows into DOM sinks (XSS).",
    "suggestion": "Use textContent or proper encoding instead of innerHTML/document.write."
  },
  {
    "id": "JS-CMD-TAINT",
    "language": "javascript",
    "category": "Command Injection",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-78",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "sources": ["req.query", "req.body", "window.location", "document.cookie"],
    "sinks": ["child_process.exec", "child_process.execSync", "child_process.spawn", "child_process.spawnSync", "child_process.execFile", "child_process.execFileSync"],
    "message": "User-controlled input flows into OS command execution.",
    "suggestion": "Avoid passing user input to shell commands. Use safe libraries or parameterized APIs."
  },
  {
    "id": "JS-FS-TAINT",
    "language": "javascript",
    "category": "File Inclusion / Path Traversal",
    "owasp": "A01:2021-Broken Access Control",
    "cwe": "CWE-22",
    "severity": "HIGH",
    "type": "taint-ast",
    "sources": ["req.query", "req.body", "window.location", "document.cookie"],
    "sinks": ["fs.readFile", "fs.readFileSync", "fs.writeFile", "fs.writeFileSync", "fs.appendFile", "fs.open", "fs.unlink", "fs.rename"],
    "message": "User-controlled input flows into file system operations (possible path traversal).",
    "suggestion": "Validate and whitelist file paths before access."
  },
  {
    "id": "JS-HTTP-TAINT",
    "language": "javascript",
    "category": "SSRF",
    "owasp": "A10:2021-SSRF",
    "cwe": "CWE-918",
    "severity": "HIGH",
    "type": "taint-ast",
    "sources": ["req.query", "req.body", "document.cookie"],
    "sinks": ["http.get", "http.request", "axios.get", "axios.post", "fetch", "superagent.get", "got", "request"],
    "conditions": {
      "sinkArgument": "mustBeUrl"
    },
    "message": "User-controlled input flows into HTTP requests (SSRF).",
    "suggestion": "Restrict user-controlled URLs or use allowlists."
  },{
    "id": "PHP-FILE-TAINT",
    "language": "php",
    "category": "File Inclusion",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-98",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "sinks": ["include", "include_once", "require", "require_once"],
    "message": "User-controlled input flows into file include/require.",
    "suggestion": "Do not include files based on user input. Use static paths."
  },
  {
    "id": "PHP-FS-TAINT",
    "language": "php",
    "category": "File Path Traversal",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-22",
    "severity": "HIGH",
    "type": "taint-ast",
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "sinks": ["fopen", "file_get_contents", "file_put_contents", "unlink"],
    "message": "User-controlled input flows into filesystem operations (Path Traversal).",
    "suggestion": "Whitelist and validate file paths."
  },
  {
    "id": "PHP-HEADER-TAINT",
    "language": "php",
    "category": "HTTP Response Splitting",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-113",
    "severity": "HIGH",
    "type": "taint-ast",
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "sinks": ["header"],
    "message": "User-controlled input flows into header(), enabling HTTP response splitting.",
    "suggestion": "Sanitize header values before usage."
  },{
    "id": "JS-EVAL-TAINT",
    "language": "javascript",
    "category": "Code Injection",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-95",
    "severity": "HIGH",
    "type": "taint-ast",
    "sources": ["req.query", "req.body", "window.location", "document.cookie", "userInput"],
    "sinks": ["eval"],
    "message": "User input flows into eval(), leading to possible code execution.",
    "suggestion": "Avoid eval(); use safer alternatives like JSON.parse or predefined function maps."
  },
  {
    "id": "JS-INNERHTML-TAINT",
    "language": "javascript",
    "category": "Cross-Site Scripting",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-79",
    "severity": "HIGH",
    "type": "taint-ast",
    "sources": ["req.query", "req.body", "window.location", "document.cookie", "userInput"],
    "sinks": ["innerHTML", "outerHTML", "insertAdjacentHTML", "document.write"],
    "message": "User input flows into DOM sinks (XSS).",
    "suggestion": "Use textContent, DOMPurify, or proper encoding instead of unsafe HTML insertion."
  },{
    "id": "PHP-EVAL-TAINT",
    "language": "php",
    "category": "Code Injection",
    "owasp": "A03:2021-Injection",
    "severity": "HIGH",
    "type": "taint-ast",
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "sinks": ["eval"],
    "message": "User input flows into eval(), enabling code injection.",
    "suggestion": "Avoid eval() entirely; use safer alternatives."
  },
  {
    "id": "PHP-CMD-TAINT",
    "language": "php",
    "category": "Command Injection",
    "owasp": "A03:2021-Injection",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "sinks": ["system", "exec", "shell_exec", "passthru", "popen"],
    "message": "User input flows into system/exec functions, leading to command injection.",
    "suggestion": "Never pass raw user input to system commands. Use escapeshellcmd or better, avoid these APIs."
  },
  {
    "id": "PHP-INCLUDE-TAINT",
    "language": "php",
    "category": "File Inclusion",
    "owasp": "A05:2021-Security Misconfiguration",
    "severity": "HIGH",
    "type": "taint-ast",
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "sinks": ["include", "require", "include_once", "require_once"],
    "message": "User input flows into include/require, leading to File Inclusion vulnerability.",
    "suggestion": "Validate/whitelist included files and disable remote includes."
  },{
    "id": "PHP-EVAL-TAINT",
    "language": "php",
    "type": "taint-ast",
    "severity": "HIGH",
    "category": "Code Injection",
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "sinks": ["eval"],
    "message": "User-controlled input flows into eval(), allowing arbitrary code execution.",
    "suggestion": "Avoid using eval() with user input. Use safer alternatives like include/require or parsing."
  },
  {
    "id": "PHP-SYSTEM-TAINT",
    "language": "php",
    "type": "taint-ast",
    "severity": "HIGH",
    "category": "Command Injection",
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "sinks": ["system"],
    "message": "User input flows into system(), leading to command injection.",
    "suggestion": "Validate and sanitize input or use safer APIs. Use escapeshellarg() when necessary."
  },
  {
    "id": "PHP-EXEC-TAINT",
    "language": "php",
    "type": "taint-ast",
    "severity": "HIGH",
    "category": "Command Injection",
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "sinks": ["exec"],
    "message": "User input flows into exec(), leading to command injection.",
    "suggestion": "Do not pass raw user input to exec(). Validate input or use safer APIs."
  },
  {
    "id": "PHP-SHELL-EXEC-TAINT",
    "language": "php",
    "type": "taint-ast",
    "severity": "HIGH",
    "category": "Command Injection",
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "sinks": ["shell_exec"],
    "message": "User input flows into shell_exec(), leading to command injection.",
    "suggestion": "Avoid shell_exec(). Use built-in PHP functions instead of executing shell commands."
  },
  {
    "id": "PHP-PASSTHRU-TAINT",
    "language": "php",
    "type": "taint-ast",
    "severity": "HIGH",
    "category": "Command Injection",
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "sinks": ["passthru"],
    "message": "User input flows into passthru(), leading to command injection.",
    "suggestion": "Do not use passthru() with user input. Consider safer alternatives."
  },
  {
    "id": "PHP-POPEN-TAINT",
    "language": "php",
    "type": "taint-ast",
    "severity": "HIGH",
    "category": "Command Injection",
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "sinks": ["popen"],
    "message": "User input flows into popen(), leading to command injection.",
    "suggestion": "Avoid popen(). If absolutely necessary, sanitize input strictly."
  },{
    "id": "PY-EVAL-REGEX",
    "language": "python",
    "type": "regex",
    "severity": "CRITICAL",
    "category": "Code Injection",
    "message": "Use of eval() can lead to code execution.",
    "suggestion": "Avoid eval(); use ast.literal_eval if parsing data.",
    "pattern": "\\beval\\s*\\(",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-94"
  },
  {
    "id": "PY-PICKLE-LOAD-HEURISTIC",
    "language": "python",
    "type": "heuristic",
    "severity": "HIGH",
    "category": "Insecure Deserialization",
    "message": "Use of pickle.load() is unsafe with untrusted input.",
    "suggestion": "Avoid pickle with untrusted data; use JSON or safer libraries.",
    "pattern": "\\bpickle\\.load\\s*\\(",
    "owasp": "A08:2021-Software and Data Integrity Failures",
    "cwe": "CWE-502"
  },
  {
    "id": "PY-EVAL-TAINT",
    "language": "python",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Code Injection",
    "message": "User-controlled input flows into eval().",
    "suggestion": "Validate and sanitize input before execution; avoid eval().",
    "sources": ["input", "sys.argv"],
    "sinks": ["eval"],
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-94"
  },
  {
    "id": "PY-SUBPROCESS-SHELL-TAINT",
    "language": "python",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Command Injection",
    "message": "Untrusted input flows into subprocess with shell=True.",
    "suggestion": "Avoid shell=True; pass arguments as list.",
    "sources": ["input", "sys.argv"],
    "sinks": ["subprocess.call", "subprocess.Popen", "os.system"],
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-78"
  },
  {
    "id": "PY-OS-SYSTEM-AST",
    "language": "python",
    "type": "ast",
    "severity": "HIGH",
    "category": "Command Injection",
    "message": "os.system() usage detected.",
    "suggestion": "Use subprocess.run with argument list instead of os.system.",
    "nodeType": "Call",
    "calleeName": "system",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-78"
  },{
    "id": "JAVA-RUNTIME-EXEC-REGEX",
    "language": "java",
    "type": "regex",
    "severity": "CRITICAL",
    "category": "Command Injection",
    "message": "Runtime.getRuntime().exec() detected.",
    "suggestion": "Avoid direct exec(); use ProcessBuilder with validated args.",
    "pattern": "Runtime\\.getRuntime\\(\\)\\.exec",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-78"
  },
  {
    "id": "JAVA-SQL-HEURISTIC",
    "language": "java",
    "type": "heuristic",
    "severity": "HIGH",
    "category": "SQL Injection",
    "message": "Concatenating SQL queries with user input is dangerous.",
    "suggestion": "Use PreparedStatement with bind parameters.",
    "pattern": "\"SELECT .*\" \\+ ",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-89"
  },
  {
    "id": "JAVA-DESERIALIZE-AST",
    "language": "java",
    "type": "ast",
    "severity": "HIGH",
    "category": "Insecure Deserialization",
    "message": "ObjectInputStream.readObject() detected.",
    "suggestion": "Avoid deserialization of untrusted data.",
    "nodeType": "MethodInvocation",
    "calleeName": "readObject",
    "owasp": "A08:2021-Software and Data Integrity Failures",
    "cwe": "CWE-502"
  },
  {
    "id": "JAVA-RUNTIME-EXEC-TAINT",
    "language": "java",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Command Injection",
    "message": "User-controlled input flows into Runtime.exec().",
    "suggestion": "Validate user input and use ProcessBuilder safely.",
    "sources": ["request.getParameter", "System.in", "args"],
    "sinks": ["Runtime.getRuntime().exec"],
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-78"
  },
  {
    "id": "JAVA-XSS-CONTEXT",
    "language": "java",
    "type": "context-ast",
    "severity": "HIGH",
    "category": "Cross-Site Scripting (XSS)",
    "message": "User input written directly into HTML response.",
    "suggestion": "Escape/encode user input before writing to response.",
    "nodeType": "MethodInvocation",
    "calleeName": "print",
    "sources": ["request.getParameter"],
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-79"
  },{
    "id": "PY-EVAL",
    "language": "python",
    "type": "regex",
    "pattern": "\\beval\\s*\\(",
    "severity": "CRITICAL",
    "category": "Code Execution",
    "message": "Use of eval() may lead to code injection.",
    "suggestion": "Avoid eval(). Use safer alternatives like ast.literal_eval().",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-94"
  },
  {
    "id": "PY-OS-SYSTEM",
    "language": "python",
    "type": "ast",
    "pattern": "os.system",
    "severity": "HIGH",
    "category": "Command Injection",
    "message": "os.system() with untrusted input allows command injection.",
    "suggestion": "Use subprocess.run() with list args and input validation.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-78"
  },
  {
    "id": "PY-SUBPROCESS-SHELL",
    "language": "python",
    "type": "context-ast",
    "pattern": "subprocess.Popen|subprocess.run|subprocess.call",
    "severity": "HIGH",
    "category": "Command Injection",
    "message": "subprocess with shell=True is dangerous.",
    "suggestion": "Do not use shell=True. Pass arguments as a list.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-78"
  },
  {
    "id": "PY-PICKLE-LOAD",
    "language": "python",
    "type": "ast",
    "pattern": "pickle.load|pickle.loads",
    "severity": "CRITICAL",
    "category": "Insecure Deserialization",
    "message": "Untrusted pickle deserialization leads to RCE.",
    "suggestion": "Avoid pickle for untrusted data. Use JSON or safe serializers.",
    "owasp": "A08:2021-SoftwareandDataIntegrityFailures",
    "cwe": "CWE-502"
  },
  {
  "id": "PY-HARDCODED-SECRET",
  "language": "python",
  "type": "regex",
  "pattern": "(AKIA[0-9A-Z]{16}|(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])[A-Za-z0-9/+=]{32,})",
  "severity": "HIGH",
  "category": "Secrets",
  "message": "Hardcoded API key or secret found.",
  "suggestion": "Remove secrets from code. Use environment variables or a secrets manager instead of committing them.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-798"
}
,
  {
    "id": "PY-TAINT-CMD",
    "language": "python",
    "type": "taint-ast",
    "sources": ["input", "sys.argv", "os.environ"],
    "sinks": ["os.system", "subprocess.run", "subprocess.Popen"],
    "severity": "CRITICAL",
    "category": "Command Injection",
    "message": "User input flows into system command.",
    "suggestion": "Validate/escape input before passing to system commands.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-78"
  },{
    "id": "JAVA-RUNTIME-EXEC",
    "language": "java",
    "type": "ast",
    "pattern": "Runtime.getRuntime().exec",
    "severity": "CRITICAL",
    "category": "Command Injection",
    "message": "Runtime.exec() with untrusted input allows command injection.",
    "suggestion": "Avoid Runtime.exec(). Use ProcessBuilder safely.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-78"
  },
  {
    "id": "JAVA-SERIALIZATION",
    "language": "java",
    "type": "ast",
    "pattern": "ObjectInputStream.readObject",
    "severity": "CRITICAL",
    "category": "Insecure Deserialization",
    "message": "Java deserialization of untrusted data is dangerous.",
    "suggestion": "Do not deserialize untrusted objects. Use JSON or protobuf.",
    "owasp": "A08:2021-SoftwareandDataIntegrityFailures",
    "cwe": "CWE-502"
  },
  {
    "id": "JAVA-SQL-CONCAT",
    "language": "java",
    "type": "regex",
    "pattern": "Statement\\s+.*execute(Query|Update)\\s*\\(.*\\+.*\\)",
    "severity": "CRITICAL",
    "category": "SQL Injection",
    "message": "String concatenation in SQL queries allows SQLi.",
    "suggestion": "Use PreparedStatement with bind variables.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-89"
  },
  {
    "id": "JAVA-HARDCODED-PASSWORD",
    "language": "java",
    "type": "heuristic",
    "pattern": "(password|passwd)\\s*=\\s*\".*\"",
    "severity": "HIGH",
    "category": "Secrets",
    "message": "Hardcoded password detected.",
    "suggestion": "Remove hardcoded credentials. Use config or secrets manager.",
    "owasp": "A02:2021-CryptographicFailures",
    "cwe": "CWE-798"
  },
  {
    "id": "JAVA-TAINT-CMD",
    "language": "java",
    "type": "taint-ast",
    "sources": ["request.getParameter", "System.getProperty", "System.getenv"],
    "sinks": ["Runtime.getRuntime().exec", "ProcessBuilder"],
    "severity": "CRITICAL",
    "category": "Command Injection",
    "message": "Untrusted input flows into system command execution.",
    "suggestion": "Validate and sanitize input before using in commands.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-78"
  },{
    "id": "PY-INPUT-EVAL",
    "language": "python",
    "type": "taint-ast",
    "sources": ["input", "sys.argv", "os.environ"],
    "sinks": ["eval", "exec"],
    "severity": "CRITICAL",
    "category": "Code Execution",
    "message": "User input flows into eval/exec → Remote Code Execution.",
    "suggestion": "Avoid eval/exec. Use safer alternatives.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-94"
  },
  {
    "id": "PY-YAML-LOAD",
    "language": "python",
    "type": "ast",
    "pattern": "yaml.load",
    "severity": "CRITICAL",
    "category": "Deserialization",
    "message": "yaml.load() with untrusted input is unsafe.",
    "suggestion": "Use yaml.safe_load().",
    "owasp": "A08:2021-SoftwareandDataIntegrityFailures",
    "cwe": "CWE-502"
  },
  {
    "id": "PY-REQUESTS-HTTP",
    "language": "python",
    "type": "regex",
    "pattern": "requests\\.(get|post|put|delete)\\(\\s*['\"]http://",
    "severity": "MEDIUM",
    "category": "Insecure Transport",
    "message": "Unencrypted HTTP request detected.",
    "suggestion": "Use HTTPS for secure communication.",
    "owasp": "A02:2021-CryptographicFailures",
    "cwe": "CWE-319"
  },
  {
    "id": "PY-SSL-VERIFY-FALSE",
    "language": "python",
    "type": "regex",
    "pattern": "verify\\s*=\\s*False",
    "severity": "HIGH",
    "category": "Insecure TLS",
    "message": "SSL certificate verification disabled.",
    "suggestion": "Do not disable SSL verification.",
    "owasp": "A02:2021-CryptographicFailures",
    "cwe": "CWE-295"
  },
  {
    "id": "PY-HASH-MD5",
    "language": "python",
    "type": "ast",
    "pattern": "hashlib.md5",
    "severity": "MEDIUM",
    "category": "Weak Cryptography",
    "message": "MD5 is insecure for password hashing or integrity checks.",
    "suggestion": "Use SHA-256 or stronger. For passwords, use bcrypt/argon2.",
    "owasp": "A02:2021-CryptographicFailures",
    "cwe": "CWE-327"
  },
  {
    "id": "PY-RANDOM",
    "language": "python",
    "type": "heuristic",
    "pattern": "random\\.random\\(\\)|random\\.randint\\(",
    "severity": "LOW",
    "category": "Weak Randomness",
    "message": "Use of weak PRNG for security-sensitive purposes.",
    "suggestion": "Use secrets module or os.urandom().",
    "owasp": "A02:2021-CryptographicFailures",
    "cwe": "CWE-338"
  },
  {
    "id": "PY-OPEN-WRITE",
    "language": "python",
    "type": "context-ast",
    "pattern": "open",
    "severity": "HIGH",
    "category": "Path Traversal",
    "message": "Opening files with untrusted input may allow path traversal.",
    "suggestion": "Validate and sanitize file paths before use.",
    "owasp": "A01:2021-BrokenAccessControl",
    "cwe": "CWE-22"
  },{
    "id": "JAVA-SQL-CONCAT-INPUT",
    "language": "java",
    "type": "taint-ast",
    "sources": ["request.getParameter", "System.getProperty"],
    "sinks": ["Statement.executeQuery", "Statement.executeUpdate"],
    "severity": "CRITICAL",
    "category": "SQL Injection",
    "message": "Untrusted input flows into SQL query.",
    "suggestion": "Use PreparedStatements with parameterized queries.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-89"
  },
  {
    "id": "JAVA-LOG-SENSITIVE",
    "language": "java",
    "type": "regex",
    "pattern": "logger\\.(info|debug|error)\\(.*(password|secret|token).*\\)",
    "severity": "MEDIUM",
    "category": "Sensitive Data Exposure",
    "message": "Logging sensitive data may expose secrets.",
    "suggestion": "Avoid logging credentials or sensitive data.",
    "owasp": "A02:2021-CryptographicFailures",
    "cwe": "CWE-532"
  },
  {
    "id": "JAVA-SSL-VERIFY-OFF",
    "language": "java",
    "type": "regex",
    "pattern": "setHostnameVerifier\\s*\\(\\s*\\(hostname, session\\) -> true\\)",
    "severity": "HIGH",
    "category": "Insecure TLS",
    "message": "Disabling SSL hostname verification is insecure.",
    "suggestion": "Enable proper SSL verification.",
    "owasp": "A02:2021-CryptographicFailures",
    "cwe": "CWE-295"
  },
  {
    "id": "JAVA-MD5",
    "language": "java",
    "type": "ast",
    "pattern": "MessageDigest.getInstance\\(\"MD5\"\\)",
    "severity": "MEDIUM",
    "category": "Weak Cryptography",
    "message": "MD5 is insecure for cryptographic purposes.",
    "suggestion": "Use SHA-256 or stronger.",
    "owasp": "A02:2021-CryptographicFailures",
    "cwe": "CWE-327"
  },
  {
    "id": "JAVA-RANDOM",
    "language": "java",
    "type": "heuristic",
    "pattern": "new\\s+Random\\(",
    "severity": "LOW",
    "category": "Weak Randomness",
    "message": "java.util.Random is not cryptographically secure.",
    "suggestion": "Use java.security.SecureRandom for security-sensitive cases.",
    "owasp": "A02:2021-CryptographicFailures",
    "cwe": "CWE-338"
  },
  {
    "id": "JAVA-FILE-READ",
    "language": "java",
    "type": "context-ast",
    "pattern": "FileReader|FileInputStream",
    "severity": "HIGH",
    "category": "Path Traversal",
    "message": "File read operations on untrusted input may allow path traversal.",
    "suggestion": "Sanitize and validate file paths.",
    "owasp": "A01:2021-BrokenAccessControl",
    "cwe": "CWE-22"
  },
  {
    "id": "JAVA-XXE",
    "language": "java",
    "type": "ast",
    "pattern": "DocumentBuilderFactory|SAXParserFactory",
    "severity": "CRITICAL",
    "category": "XXE Injection",
    "message": "XML parser may allow XXE attacks if not configured securely.",
    "suggestion": "Disable external entities and DTD processing.",
    "owasp": "A05:2021-SecurityMisconfiguration",
    "cwe": "CWE-611"
  },{
  "id": "GEN-CLICKJACKING-IFRAME",
  "language": "javascript",
  "type": "regex",
  "pattern": "<iframe(?![^>]*(sandbox|allow)).*>",
  "severity": "MEDIUM",
  "category": "UI Redress / Clickjacking",
  "message": "Iframe detected without sandboxing or allow restrictions → possible clickjacking.",
  "suggestion": "Use X-Frame-Options or Content-Security-Policy (frame-ancestors), and apply sandbox/allow attributes on iframes.",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-1021"
}
,
  {
    "id": "GEN-CLICKJACKING-HEADER",
    "language": "php",
    "type": "regex",
    "pattern": "header\\s*\\(\\s*['\"]X-Frame-Options",
    "severity": "LOW",
    "category": "UI Redress / Clickjacking",
    "message": "Missing secure headers (X-Frame-Options).",
    "suggestion": "Add header('X-Frame-Options: DENY').",
    "owasp": "A05:2021-SecurityMisconfiguration",
    "cwe": "CWE-693"
  },{
    "id": "PHP-UNIQID",
    "language": "php",
    "type": "regex",
    "pattern": "uniqid\\(",
    "severity": "MEDIUM",
    "category": "Weak Randomness",
    "message": "uniqid() is predictable and not secure for crypto use.",
    "suggestion": "Use random_bytes() or openssl_random_pseudo_bytes().",
    "owasp": "A02:2021-CryptographicFailures",
    "cwe": "CWE-338"
  },
  {
    "id": "PHP-MT-RAND",
    "language": "php",
    "type": "regex",
    "pattern": "mt_rand\\(",
    "severity": "MEDIUM",
    "category": "Weak Randomness",
    "message": "mt_rand() is not secure for cryptographic purposes.",
    "suggestion": "Use random_int() instead.",
    "owasp": "A02:2021-CryptographicFailures",
    "cwe": "CWE-338"
  },
  {
    "id": "PY-RANDOM-MODULE",
    "language": "python",
    "type": "heuristic",
    "pattern": "random\\.(randint|random|choice)",
    "severity": "LOW",
    "category": "Weak Randomness",
    "message": "random module is not cryptographically secure.",
    "suggestion": "Use secrets or os.urandom().",
    "owasp": "A02:2021-CryptographicFailures",
    "cwe": "CWE-338"
  },
  {
    "id": "JAVA-RANDOM-CLASS",
    "language": "java",
    "type": "regex",
    "pattern": "new\\s+Random\\(",
    "severity": "LOW",
    "category": "Weak Randomness",
    "message": "java.util.Random is predictable.",
    "suggestion": "Use SecureRandom for cryptographic purposes.",
    "owasp": "A02:2021-CryptographicFailures",
    "cwe": "CWE-338"
  },{
    "id": "PHP-TEMPNAM",
    "language": "php",
    "type": "context-ast",
    "pattern": "tempnam",
    "severity": "HIGH",
    "category": "Insecure Temporary File",
    "message": "tempnam() used with predictable prefix may lead to race conditions.",
    "suggestion": "Use sys_get_temp_dir() with random_bytes() for unpredictable names.",
    "owasp": "A05:2021-SecurityMisconfiguration",
    "cwe": "CWE-377"
  },
  {
    "id": "PY-TEMPFILE-UNSAFE",
    "language": "python",
    "type": "regex",
    "pattern": "tempfile.mktemp",
    "severity": "HIGH",
    "category": "Insecure Temporary File",
    "message": "tempfile.mktemp() is unsafe due to race conditions.",
    "suggestion": "Use NamedTemporaryFile(delete=True).",
    "owasp": "A05:2021-SecurityMisconfiguration",
    "cwe": "CWE-377"
  },
  {
    "id": "JAVA-FILE-CREATE-TEMP",
    "language": "java",
    "type": "regex",
    "pattern": "File.createTempFile",
    "severity": "MEDIUM",
    "category": "Insecure Temporary File",
    "message": "Ensure temp file creation uses secure random names.",
    "suggestion": "Restrict permissions and validate paths.",
    "owasp": "A05:2021-SecurityMisconfiguration",
    "cwe": "CWE-377"
  },{
    "id": "PHP-ERROR-LOG",
    "language": "php",
    "type": "regex",
    "pattern": "error_log\\(.*(password|secret|token)",
    "severity": "MEDIUM",
    "category": "Information Disclosure",
    "message": "Sensitive data logged using error_log().",
    "suggestion": "Avoid logging secrets or scrub them first.",
    "owasp": "A09:2021-SecurityLoggingAndMonitoringFailures",
    "cwe": "CWE-532"
  },
  {
    "id": "PY-LOGGING-SENSITIVE",
    "language": "python",
    "type": "regex",
    "pattern": "logging\\.(info|debug|error)\\(.*(password|secret|token)",
    "severity": "MEDIUM",
    "category": "Information Disclosure",
    "message": "Sensitive data logged using Python logging.",
    "suggestion": "Avoid logging secrets.",
    "owasp": "A09:2021-SecurityLoggingAndMonitoringFailures",
    "cwe": "CWE-532"
  },
  {
    "id": "JAVA-LOGGER-SENSITIVE",
    "language": "java",
    "type": "regex",
    "pattern": "logger\\.(info|debug|error)\\(.*(password|secret|token)",
    "severity": "MEDIUM",
    "category": "Information Disclosure",
    "message": "Logging sensitive data detected.",
    "suggestion": "Do not log passwords/tokens.",
    "owasp": "A09:2021-SecurityLoggingAndMonitoringFailures",
    "cwe": "CWE-532"
  },{
    "id": "PHP-MAIL",
    "language": "php",
    "type": "regex",
    "pattern": "mail\\(",
    "severity": "HIGH",
    "category": "Email Injection",
    "message": "mail() function with user input may allow header injection.",
    "suggestion": "Sanitize inputs or use libraries like PHPMailer.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-93"
  },
  {
    "id": "PY-SMTPLIB",
    "language": "python",
    "type": "regex",
    "pattern": "smtplib\\.SMTP",
    "severity": "MEDIUM",
    "category": "Insecure Mail",
    "message": "Direct use of smtplib may allow header injection.",
    "suggestion": "Validate all mail headers before sending.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-93"
  },
  {
    "id": "JAVA-MAIL",
    "language": "java",
    "type": "regex",
    "pattern": "javax\\.mail",
    "severity": "MEDIUM",
    "category": "Insecure Mail",
    "message": "JavaMail usage must validate untrusted inputs to prevent header injection.",
    "suggestion": "Sanitize subject/from/to headers.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-93"
  },{
    "id": "PHP-POPEN",
    "language": "php",
    "type": "regex",
    "pattern": "popen\\(",
    "severity": "HIGH",
    "category": "Command Execution",
    "message": "popen() with user input can lead to RCE.",
    "suggestion": "Avoid process control functions with untrusted input.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-78"
  },
  {
    "id": "PHP-PROC-OPEN",
    "language": "php",
    "type": "regex",
    "pattern": "proc_open\\(",
    "severity": "HIGH",
    "category": "Command Execution",
    "message": "proc_open() with user input can lead to RCE.",
    "suggestion": "Avoid or sanitize commands.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-78"
  },{
    "id": "PHP-BACKTICKS",
    "language": "php",
    "type": "ast",
    "pattern": "`.*?`",
    "severity": "CRITICAL",
    "category": "Command Execution",
    "message": "Backticks operator executes shell commands.",
    "suggestion": "Avoid backticks, use safer APIs.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-78"
  },{
    "id": "PHP-HEADER-INJECTION",
    "language": "php",
    "type": "taint-ast",
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "sinks": ["header"],
    "severity": "HIGH",
    "category": "HTTP Response Splitting",
    "message": "User input flows into header() → potential injection.",
    "suggestion": "Validate input and use safe APIs.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-113"
  },
  {
    "id": "JAVA-HEADER-INJECTION",
    "language": "java",
    "type": "taint-ast",
    "sources": ["request.getParameter"],
    "sinks": ["HttpServletResponse.addHeader", "HttpServletResponse.setHeader"],
    "severity": "HIGH",
    "category": "HTTP Response Splitting",
    "message": "Untrusted input flows into response headers.",
    "suggestion": "Validate and sanitize header values.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-113"
  },
  {
    "id": "PY-HEADER-INJECTION",
    "language": "python",
    "type": "regex",
    "pattern": "response\\['.*'\\]\\s*=\\s*.*input",
    "severity": "HIGH",
    "category": "HTTP Response Splitting",
    "message": "Untrusted input flows into HTTP response headers.",
    "suggestion": "Validate headers before setting.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-113"
  },{
    "id": "PHP-MYSQLI-QUERY-SQLI",
    "language": "php",
    "type": "taint-ast",
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "sinks": ["mysqli_query", "mysql_query", "pdo->query", "pdo->exec"],
    "severity": "CRITICAL",
    "category": "Injection",
    "message": "User input flows into SQL query → SQL Injection.",
    "suggestion": "Use prepared statements (PDO with parameter binding).",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-89"
  },
  {
    "id": "PHP-MYSQLI-CONCAT-SQLI",
    "language": "php",
    "type": "regex",
    "pattern": "SELECT.+\\$_(GET|POST|REQUEST)",
    "severity": "HIGH",
    "category": "Injection",
    "message": "Dynamic SQL query built with user input detected.",
    "suggestion": "Use prepared statements instead of string concatenation.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-89"
  },{
    "id": "JAVA-STATEMENT-SQLI",
    "language": "java",
    "type": "taint-ast",
    "sources": ["request.getParameter"],
    "sinks": ["Statement.executeQuery", "Statement.executeUpdate", "Statement.execute"],
    "severity": "CRITICAL",
    "category": "Injection",
    "message": "Untrusted input flows into SQL Statement → SQL Injection.",
    "suggestion": "Use PreparedStatement with bind parameters.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-89"
  },
  {
    "id": "JAVA-CONCAT-SQLI",
    "language": "java",
    "type": "regex",
    "pattern": "execute(Query|Update)\\s*\\(.*\\+.*request.getParameter",
    "severity": "HIGH",
    "category": "Injection",
    "message": "SQL query concatenated with user input.",
    "suggestion": "Avoid string concatenation, use PreparedStatement.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-89"
  },{
    "id": "PYTHON-EXECUTESQL-SQLI",
    "language": "python",
    "type": "taint-ast",
    "sources": ["input", "request.GET", "request.POST"],
    "sinks": ["cursor.execute"],
    "severity": "CRITICAL",
    "category": "Injection",
    "message": "User input flows into SQL execute() → SQL Injection.",
    "suggestion": "Use parameterized queries with placeholders (%s, ?, etc).",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-89"
  },
  {
    "id": "PYTHON-FORMAT-SQLI",
    "language": "python",
    "type": "regex",
    "pattern": "execute\\(.*(['\"]).*\\{.*\\}.*\\1",
    "severity": "HIGH",
    "category": "Injection",
    "message": "SQL query formatted with Python string interpolation.",
    "suggestion": "Do not use f-strings or .format() for SQL queries.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-89"
  },{
    "id": "PHP-ECHO-XSS",
    "language": "php",
    "type": "taint-ast",
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "sinks": ["echo", "print"],
    "severity": "CRITICAL",
    "category": "Cross-Site Scripting",
    "message": "User input directly echoed → Reflected XSS.",
    "suggestion": "Escape HTML output using htmlspecialchars() or templating.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-79"
  },
  {
    "id": "PHP-DOCUMENT-WRITE-XSS",
    "language": "php",
    "type": "regex",
    "pattern": "document\\.write\\(.*\\$_(GET|POST|REQUEST)",
    "severity": "HIGH",
    "category": "Cross-Site Scripting",
    "message": "document.write() with user input can cause DOM XSS.",
    "suggestion": "Avoid document.write(), use safe DOM APIs.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-79"
  },{
    "id": "JAVA-PRINTWRITER-XSS",
    "language": "java",
    "type": "taint-ast",
    "sources": ["request.getParameter"],
    "sinks": ["PrintWriter.print", "PrintWriter.println", "out.write"],
    "severity": "CRITICAL",
    "category": "Cross-Site Scripting",
    "message": "Untrusted input written to response → Reflected XSS.",
    "suggestion": "Escape output with libraries like OWASP Java Encoder.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-79"
  },
  {
    "id": "JAVA-JSP-EXPRESSION-XSS",
    "language": "java",
    "type": "regex",
    "pattern": "<%=\\s*request.getParameter",
    "severity": "HIGH",
    "category": "Cross-Site Scripting",
    "message": "Direct JSP expression with user input → XSS.",
    "suggestion": "Use JSTL <c:out> or encode user data.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-79"
  },{
    "id": "PYTHON-FLASK-XSS",
    "language": "python",
    "type": "taint-ast",
    "sources": ["request.args", "request.form"],
    "sinks": ["return", "Response"],
    "severity": "CRITICAL",
    "category": "Cross-Site Scripting",
    "message": "Flask response with unsanitized user input → Reflected XSS.",
    "suggestion": "Use Flask’s autoescaping (Jinja2) or escape inputs manually.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-79"
  },
  {
    "id": "PYTHON-DJANGO-MARKSAFE-XSS",
    "language": "python",
    "type": "regex",
    "pattern": "mark_safe\\(",
    "severity": "HIGH",
    "category": "Cross-Site Scripting",
    "message": "Django mark_safe() disables escaping and can cause XSS.",
    "suggestion": "Avoid mark_safe unless absolutely necessary.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-79"
  },  {
    "id": "JAVA-PATH-TRAVERSAL",
    "language": "java",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Path Traversal",
    "sources": ["request.getParameter", "args"],
    "sinks": ["new File", "FileInputStream", "FileOutputStream"],
    "message": "User-controlled input flows into file path.",
    "suggestion": "Validate and sanitize filenames, restrict to safe directories.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-22"
  },
  {
    "id": "PY-PATH-TRAVERSAL",
    "language": "python",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Path Traversal",
    "sources": ["input", "request.args.get", "sys.argv"],
    "sinks": ["open", "os.path.join"],
    "message": "User-controlled input flows into file path.",
    "suggestion": "Use whitelist validation and os.path.abspath to constrain paths.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-22"
  },
  {
    "id": "PHP-PATH-TRAVERSAL",
    "language": "php",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Path Traversal",
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "sinks": ["include", "require", "fopen", "file_get_contents"],
    "message": "User-controlled input flows into file path.",
    "suggestion": "Normalize paths and disallow `..` sequences.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-22"
  },
  {
  "id": "JS-PATH-TRAVERSAL",
  "language": "javascript",
  "type": "taint-ast",
  "severity": "CRITICAL",
  "category": "Path Traversal",
  "sources": ["req.query", "req.params", "req.body", "process.argv"],
  "sinks": [
    "fs.readFile", "fs.readFileSync",
    "fs.writeFile", "fs.writeFileSync",
    "fs.appendFile", "fs.appendFileSync",
    "fs.createReadStream", "fs.createWriteStream",
    "fs.unlink", "fs.unlinkSync"
  ],
  "message": "Untrusted input flows into file system operations → possible path traversal.",
  "suggestion": "Validate file paths against a strict allowlist, use path.resolve()/normalize(), and block '..' sequences to prevent directory traversal.",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-22"
}
,


  {
    "id": "JAVA-WEAK-HASH",
    "language": "java",
    "type": "regex",
    "severity": "HIGH",
    "category": "Cryptography",
    "pattern": "MessageDigest\\.getInstance\\(\"(MD5|SHA1)\"\\)",
    "message": "Weak hashing algorithm used.",
    "suggestion": "Use SHA-256 or stronger.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-328"
  },
  {
    "id": "PY-WEAK-HASH",
    "language": "python",
    "type": "regex",
    "severity": "HIGH",
    "category": "Cryptography",
    "pattern": "hashlib\\.(md5|sha1)\\(",
    "message": "Weak hashing algorithm used.",
    "suggestion": "Use hashlib.sha256 or stronger.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-328"
  },
  {
    "id": "PHP-WEAK-HASH",
    "language": "php",
    "type": "regex",
    "severity": "HIGH",
    "category": "Cryptography",
    "pattern": "md5\\(|sha1\\(",
    "message": "Weak hashing algorithm used.",
    "suggestion": "Use password_hash() with bcrypt or Argon2.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-328"
  },
  {
  "id": "JS-WEAK-HASH",
  "language": "javascript",
  "type": "regex",
  "severity": "HIGH",
  "category": "Cryptography",
  "pattern": "crypto\\.create(Hash|Hmac)\\(['\"](?i)(md5|sha1)['\"]\\)",
  "message": "Weak hashing algorithm (MD5/SHA1) used.",
  "suggestion": "Use SHA-256, SHA-512, or SHA-3. For passwords, use bcrypt, scrypt, or Argon2 instead of general-purpose hashes.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-328"
}
,


  {
    "id": "JAVA-REDOS",
    "language": "java",
    "type": "ast",
    "severity": "HIGH",
    "category": "Denial of Service",
    "pattern": "Pattern.compile",
    "message": "Potential catastrophic regex backtracking.",
    "suggestion": "Avoid nested quantifiers, use safe regex libraries.",
    "owasp": "A06:2021-DoS",
    "cwe": "CWE-400"
  },
  {
    "id": "PY-REDOS",
    "language": "python",
    "type": "regex",
    "severity": "HIGH",
    "category": "Denial of Service",
    "pattern": "re\\.compile\\(.*(\\+\\)\\+).*\\)",
    "message": "Regex may lead to catastrophic backtracking.",
    "suggestion": "Validate regexes and limit input length.",
    "owasp": "A06:2021-DoS",
    "cwe": "CWE-400"
  },
  {
    "id": "PHP-REDOS",
    "language": "php",
    "type": "regex",
    "severity": "HIGH",
    "category": "Denial of Service",
    "pattern": "preg_match\\(.*(\\+\\)\\+).*\\)",
    "message": "Potential ReDoS pattern detected.",
    "suggestion": "Use safe regex constructs and input limits.",
    "owasp": "A06:2021-DoS",
    "cwe": "CWE-400"
  },
  {
  "id": "JS-REDOS",
  "language": "javascript",
  "type": "regex",
  "severity": "HIGH",
  "category": "Denial of Service",
  "pattern": "new RegExp\\([^)]*(\\(.*[+*?]{1,}\\)[+*?])[^)]*\\)",
  "message": "Potential ReDoS: nested or overlapping quantifiers detected in RegExp.",
  "suggestion": "Avoid patterns like (a+)+, .*+, or (.*){m,n}. Use safe-regex libraries or simplify regex.",
  "owasp": "A06:2021-Vulnerable and Outdated Components",
  "cwe": "CWE-400"
}
,{
  "id": "JAVA-DESERIALIZATION",
  "language": "java",
  "type": "ast",
  "severity": "CRITICAL",
  "category": "Insecure Deserialization",
  "pattern": "ObjectInputStream\\.readObject",
  "message": "Untrusted deserialization detected.",
  "suggestion": "Avoid native Java deserialization, use safe formats like JSON.",
  "owasp": "A08:2021-Software Integrity Failures",
  "cwe": "CWE-502"
},
{
  "id": "PY-DESERIALIZATION",
  "language": "python",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Insecure Deserialization",
  "pattern": "pickle\\.(load|loads)",
  "message": "Untrusted pickle deserialization detected.",
  "suggestion": "Use safe serialization libraries (e.g., JSON).",
  "owasp": "A08:2021-Software Integrity Failures",
  "cwe": "CWE-502"
},
{
  "id": "PHP-DESERIALIZATION",
  "language": "php",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Insecure Deserialization",
  "pattern": "unserialize\\(",
  "message": "Untrusted unserialize() usage detected.",
  "suggestion": "Avoid unserialize(), use safe formats like JSON.",
  "owasp": "A08:2021-Software Integrity Failures",
  "cwe": "CWE-502"
},
{
  "id": "JS-DESERIALIZATION",
  "language": "javascript",
  "type": "context-ast",
  "severity": "CRITICAL",
  "category": "Insecure Deserialization",
  "sources": ["req.body", "req.query", "localStorage", "sessionStorage"],
  "sinks": ["eval", "Function", "Object.assign", "Object.setPrototypeOf"],
  "message": "User-controlled input is deserialized or merged into objects without validation.",
  "suggestion": "Avoid eval for JSON. Validate and sanitize input before parsing or merging into objects. Use schema validation libraries (e.g., Joi, Yup).",
  "owasp": "A08:2021-Software and Data Integrity Failures",
  "cwe": "CWE-502"
}
,{
  "id": "JAVA-STACKTRACE",
  "language": "java",
  "type": "regex",
  "severity": "MEDIUM",
  "category": "Information Disclosure",
  "pattern": "printStackTrace\\(",
  "message": "Stack trace leakage.",
  "suggestion": "Log securely without exposing stack traces.",
  "owasp": "A09:2021-Security Logging and Monitoring Failures",
  "cwe": "CWE-209"
},
{
  "id": "PY-TRACEBACK",
  "language": "python",
  "type": "regex",
  "severity": "MEDIUM",
  "category": "Information Disclosure",
  "pattern": "traceback\\.print_exc",
  "message": "Sensitive traceback leaked.",
  "suggestion": "Hide debug output in production.",
  "owasp": "A09:2021-Security Logging and Monitoring Failures",
  "cwe": "CWE-209"
},
{
  "id": "PHP-INFO-DISCLOSURE",
  "language": "php",
  "type": "regex",
  "severity": "MEDIUM",
  "category": "Information Disclosure",
  "pattern": "var_dump\\(|print_r\\(|phpinfo\\(",
  "message": "Sensitive error information disclosure.",
  "suggestion": "Disable debug info in production.",
  "owasp": "A09:2021-Security Logging and Monitoring Failures",
  "cwe": "CWE-209"
},
{
  "id": "JS-ERROR-DISCLOSURE",
  "language": "javascript",
  "type": "regex",
  "severity": "MEDIUM",
  "category": "Information Disclosure",
  "pattern": "(console\\.(error|log)\\(.*(err|error|e|exception)\\.stack)",
  "message": "Stack trace leakage detected. Internal errors should not be exposed to users.",
  "suggestion": "Log stack traces securely (server logs), but return sanitized error messages to users.",
  "owasp": "A09:2021-Security Logging and Monitoring Failures",
  "cwe": "CWE-209"
}
,{
  "id": "JAVA-REFLECTION-MISUSE",
  "language": "java",
  "type": "context-ast",
  "severity": "CRITICAL",
  "category": "Code Execution",
  "sources": ["request.getParameter", "args"],
  "sinks": ["Class.forName", "Method.invoke", "newInstance"],
  "message": "Reflection used with user input.",
  "suggestion": "Do not allow user input in reflection APIs.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-470"
},
{
  "id": "PY-REFLECTION-MISUSE",
  "language": "python",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Code Execution",
  "pattern": "__import__\\(",
  "message": "Dynamic import from untrusted input.",
  "suggestion": "Avoid dynamic imports based on user input.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-470"
},
{
  "id": "PHP-REFLECTION-MISUSE",
  "language": "php",
  "type": "taint-ast",
  "severity": "CRITICAL",
  "category": "Code Execution",
  "sources": ["$_GET", "$_POST"],
  "sinks": ["call_user_func", "call_user_func_array"],
  "message": "Dynamic function execution with untrusted input.",
  "suggestion": "Avoid passing user input to dynamic calls.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-470"
},
{
  "id": "JS-REFLECTION-MISUSE",
  "language": "javascript",
  "type": "taint-ast",
  "severity": "CRITICAL",
  "category": "Code Execution",
  "sources": ["req.query", "req.body", "window.location", "document.cookie"],
  "sinks": ["eval", "Function"],
  "message": "Dynamic code execution from untrusted input detected.",
  "suggestion": "Avoid using eval/Function with user input. Use whitelisted function maps or safe parsers.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-470"
}
,{
  "id": "JAVA-TIMING",
  "language": "java",
  "type": "heuristic",
  "severity": "MEDIUM",
  "category": "Side-Channel",
  "pattern": "Thread\\.sleep\\(",
  "message": "Potential timing attack in comparison logic.",
  "suggestion": "Use constant-time comparisons.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-208"
},
{
  "id": "PY-TIMING",
  "language": "python",
  "type": "heuristic",
  "severity": "MEDIUM",
  "category": "Side-Channel",
  "pattern": "time\\.sleep\\(",
  "message": "Potential timing attack indicator.",
  "suggestion": "Avoid time-based checks with secrets.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-208"
},
{
  "id": "PHP-TIMING",
  "language": "php",
  "type": "regex",
  "severity": "MEDIUM",
  "category": "Side-Channel",
  "pattern": "usleep\\(",
  "message": "Timing-based side-channel risk.",
  "suggestion": "Avoid time-based conditions with secrets.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-208"
},
{
  "id": "JS-TIMING",
  "language": "javascript",
  "type": "heuristic",
  "severity": "MEDIUM",
  "category": "Side-Channel",
  "pattern": "setTimeout\\(.*(password|secret|token|compare)",
  "message": "Timing-based security check detected; this may leak sensitive information.",
  "suggestion": "Use constant-time comparison libraries for sensitive data validation.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-208"
}
,{
  "id": "JAVA-INT-OVERFLOW",
  "language": "java",
  "type": "heuristic",
  "severity": "HIGH",
  "category": "Resource Management",
  "pattern": "Integer\\.MAX_VALUE",
  "message": "Potential integer overflow or excessive memory allocation.",
  "suggestion": "Validate inputs before allocation.",
  "owasp": "A06:2021-DoS",
  "cwe": "CWE-190"
},
{
  "id": "PY-MEM-OVERFLOW",
  "language": "python",
  "type": "heuristic",
  "severity": "HIGH",
  "category": "Resource Management",
  "pattern": "bytearray\\(|\\* 10\\*\\*10",
  "message": "Excessive memory allocation.",
  "suggestion": "Limit allocation size based on safe thresholds.",
  "owasp": "A06:2021-DoS",
  "cwe": "CWE-770"
},
{
  "id": "PHP-INT-OVERFLOW",
  "language": "php",
  "type": "heuristic",
  "severity": "HIGH",
  "category": "Resource Management",
  "pattern": "str_repeat\\(",
  "message": "Possible integer overflow with str_repeat().",
  "suggestion": "Validate repeat count to prevent memory exhaustion.",
  "owasp": "A06:2021-DoS",
  "cwe": "CWE-770"
},
{
  "id": "JS-MEM-OVERFLOW",
  "language": "javascript",
  "type": "heuristic",
  "severity": "HIGH",
  "category": "Resource Management",
  "pattern": "new Array\\(Number\\.MAX_SAFE_INTEGER\\)",
  "message": "Large array allocation may cause denial of service (memory exhaustion).",
  "suggestion": "Limit allocation sizes and validate input before creating arrays.",
  "owasp": "A06:2021-DoS",
  "cwe": "CWE-770"
}
,{
  "id": "JAVA-INSECURE-CRYPTO",
  "language": "java",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Cryptography",
  "pattern": "Cipher\\.getInstance\\(\"AES/ECB",
  "message": "Use of AES in ECB mode detected.",
  "suggestion": "Use AES in GCM or CBC mode with random IVs.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-327"
},
{
  "id": "PY-INSECURE-CRYPTO",
  "language": "python",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Cryptography",
  "pattern": "AES\\.MODE_ECB",
  "message": "Use of AES in ECB mode detected.",
  "suggestion": "Use AES.MODE_GCM or AES.MODE_CBC with random IVs.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-327"
},
{
  "id": "PHP-INSECURE-CRYPTO",
  "language": "php",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Cryptography",
  "pattern": "openssl_encrypt\\(.*AES-128-ECB",
  "message": "Use of AES in ECB mode detected.",
  "suggestion": "Use AES-256-GCM or AES-256-CBC with IV.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-327"
},
{
    "id": "JS-INSECURE-CRYPTO-ECB-001",
    "language": "javascript",
    "type": "regex",
    "severity": "CRITICAL",
    "category": "Cryptography",
    "pattern": "crypto\\.createCipher(iv)?\\(['\"]aes-\\d+-ecb['\"]",
    "message": "Insecure AES mode: ECB detected → deterministic encryption leaks patterns.",
    "suggestion": "Use AES-GCM (preferred) or AES-CBC with random IVs.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-327"
  },
  {
    "id": "JS-INSECURE-CRYPTO-DES-002",
    "language": "javascript",
    "type": "regex",
    "severity": "CRITICAL",
    "category": "Cryptography",
    "pattern": "crypto\\.createCipher(iv)?\\(['\"]des(['\"]|3des['\"]|ede['\"])",
    "message": "Insecure cipher: DES/3DES detected → weak and deprecated.",
    "suggestion": "Use AES-GCM or ChaCha20 instead of DES/3DES.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-326"
  },
  {
    "id": "JS-INSECURE-CRYPTO-RC4-003",
    "language": "javascript",
    "type": "regex",
    "severity": "CRITICAL",
    "category": "Cryptography",
    "pattern": "crypto\\.createCipher(iv)?\\(['\"]rc4",
    "message": "Insecure cipher: RC4 detected → statistically weak and broken.",
    "suggestion": "Avoid RC4; use AES-GCM or ChaCha20.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-327"
  },
  {
    "id": "JS-INSECURE-HASH-SHA1-004",
    "language": "javascript",
    "type": "regex",
    "severity": "HIGH",
    "category": "Cryptography",
    "pattern": "crypto\\.createHash\\(['\"]sha1['\"]\\)",
    "message": "Weak hash detected: SHA-1 is deprecated and collision-prone.",
    "suggestion": "Use SHA-256, SHA-3, or Argon2/bcrypt for passwords.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-328"
  },{
  "id": "JAVA-SENSITIVE-LOGGING",
  "language": "java",
  "type": "regex",
  "severity": "MEDIUM",
  "category": "Logging",
  "pattern": "System\\.out\\.println\\(.*password",
  "message": "Sensitive data logged to console.",
  "suggestion": "Do not log secrets or redact sensitive fields.",
  "owasp": "A09:2021-Security Logging and Monitoring Failures",
  "cwe": "CWE-532"
},
{
  "id": "PY-SENSITIVE-LOGGING",
  "language": "python",
  "type": "regex",
  "severity": "MEDIUM",
  "category": "Logging",
  "pattern": "print\\(.*password",
  "message": "Sensitive data logged to console.",
  "suggestion": "Avoid logging credentials; use secure logging.",
  "owasp": "A09:2021-Security Logging and Monitoring Failures",
  "cwe": "CWE-532"
},
{
  "id": "PHP-SENSITIVE-LOGGING",
  "language": "php",
  "type": "regex",
  "severity": "MEDIUM",
  "category": "Logging",
  "pattern": "error_log\\(.*\\$_(POST|GET)\\['password'\\]",
  "message": "Sensitive data logged in error log.",
  "suggestion": "Do not log secrets; use redaction.",
  "owasp": "A09:2021-Security Logging and Monitoring Failures",
  "cwe": "CWE-532"
},
{
  "id": "JS-SENSITIVE-LOGGING-001",
  "language": "javascript",
  "type": "regex",
  "severity": "MEDIUM",
  "category": "Logging",
  "pattern": "console\\.log\\(.*(password|passwd|secret|token|apiKey|authorization).*\\)",
  "message": "Sensitive data (passwords, tokens, secrets) may be logged to console → Information exposure.",
  "suggestion": "Do not log sensitive information. Mask or redact secrets in logs.",
  "owasp": "A09:2021-Security Logging and Monitoring Failures",
  "cwe": "CWE-532"
}
,{
  "id": "JAVA-MISSING-AUTH",
  "language": "java",
  "type": "context-ast",
  "severity": "CRITICAL",
  "category": "Access Control",
  "sources": ["request.getParameter", "args"],
  "sinks": ["File.delete", "Statement.executeUpdate"],
  "message": "Sensitive action performed without authorization check.",
  "suggestion": "Enforce role-based access checks before critical operations.",
  "owasp": "A01:2021-Broken Access Control",
  "cwe": "CWE-285"
},
{
  "id": "PY-MISSING-AUTH",
  "language": "python",
  "type": "context-ast",
  "severity": "CRITICAL",
  "category": "Access Control",
  "sources": ["request.args.get", "input"],
  "sinks": ["os.remove", "subprocess.run"],
  "message": "Critical action without auth validation.",
  "suggestion": "Check user role/permissions before sensitive operations.",
  "owasp": "A01:2021-Broken Access Control",
  "cwe": "CWE-285"
},
{
  "id": "PHP-MISSING-AUTH",
  "language": "php",
  "type": "context-ast",
  "severity": "CRITICAL",
  "category": "Access Control",
  "sources": ["$_GET", "$_POST"],
  "sinks": ["unlink", "exec", "DELETE FROM"],
  "message": "Sensitive operation performed without authorization.",
  "suggestion": "Ensure user role validation before performing critical actions.",
  "owasp": "A01:2021-Broken Access Control",
  "cwe": "CWE-285"
},
{
  "id": "JS-MISSING-AUTH-001",
  "language": "javascript",
  "type": "taint-ast",
  "severity": "CRITICAL",
  "category": "Access Control",
  "sources": ["req.query", "req.body", "req.params"],
  "sinks": ["fs.unlink", "db.collection.deleteOne", "db.collection.remove", "db.collection.drop"],
  "message": "Critical operation (file or DB deletion) performed with user input and no authorization checks → Broken Access Control.",
  "suggestion": "Enforce authentication and role-based access control before allowing destructive operations.",
  "owasp": "A01:2021-Broken Access Control",
  "cwe": "CWE-285"
}
,{
    "id": "PY-XSS-FLASK-RESPONSE",
    "language": "python",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Cross-Site Scripting",
    "sources": ["request.args.get", "request.form.get"],
    "sinks": ["flask.Response", "render_template_string"],
    "message": "Unescaped user input returned in response → XSS risk.",
    "suggestion": "Use proper output encoding (e.g., Jinja2 autoescaping).",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-79"
  },
  {
    "id": "PY-INSECURE-FILE-HANDLING",
    "language": "python",
    "type": "context-ast",
    "severity": "HIGH",
    "category": "File Handling",
    "sources": ["request.args.get", "input"],
    "sinks": ["open", "os.remove", "shutil.move"],
    "message": "User-controlled file path used in file operations (path traversal risk).",
    "suggestion": "Validate and restrict file paths, use safe directories only.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-22"
  },
  {
    "id": "PY-HARDCODED-CREDS",
    "language": "python",
    "type": "regex",
    "severity": "CRITICAL",
    "category": "Authentication",
    "pattern": "(username|password|api_key|apikey|secret|token|DB_CONFIG)\\s*=\\s*['\"][^'\"]+['\"]",
    "message": "Hardcoded credentials or secrets found in source code.",
    "suggestion": "Remove hardcoded secrets. Use environment variables or a secrets manager.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-798"
  },
  {
    "id": "PY-WEAK-HASHING",
    "language": "python",
    "type": "regex",
    "severity": "CRITICAL",
    "category": "Cryptography",
    "pattern": "hashlib\\.(md5|sha1)\\(",
    "message": "Weak hashing algorithm (MD5/SHA1) used for password hashing.",
    "suggestion": "Use bcrypt, Argon2, or PBKDF2 with a strong iteration count and salt.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-327,CWE-328"
  },
  {
    "id": "PY-INSECURE-RANDOM",
    "language": "python",
    "type": "regex",
    "severity": "HIGH",
    "category": "Cryptography",
    "pattern": "random\\.random\\(|random\\.randint\\(",
    "message": "Insecure randomness used for security-critical functionality.",
    "suggestion": "Use secrets module (secrets.token_hex, secrets.randbelow).",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-338"
  },
  {
    "id": "PY-IMPROPER-EXCEPTION",
    "language": "python",
    "type": "regex",
    "severity": "MEDIUM",
    "category": "Error Handling",
    "pattern": "except\\s*Exception\\s*:\\s*pass",
    "message": "Swallowing exceptions without handling.",
    "suggestion": "Handle exceptions properly or log securely.",
    "owasp": "A09:2021-Security Logging and Monitoring Failures",
    "cwe": "CWE-391"
  },
  {
    "id": "PY-DEPENDENCY-VULN",
    "language": "python",
    "type": "heuristic",
    "severity": "HIGH",
    "category": "Dependencies",
    "pattern": "requirements\\.txt|Pipfile",
    "message": "Check dependencies for known vulnerabilities (use pip-audit or Safety).",
    "suggestion": "Run dependency scanning tools and update vulnerable packages.",
    "owasp": "A06:2021-Vulnerable and Outdated Components",
    "cwe": "CWE-937"
  },
  {
    "id": "PY-IDOR",
    "language": "python",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Broken Access Control",
    "sources": ["request.args.get", "request.form.get", "input"],
    "sinks": ["open", "os.path.join", "send_file", "get_user_file"],
    "message": "Insecure Direct Object Reference: user-controlled input used for file access.",
    "suggestion": "Validate object access based on user identity/permissions before use.",
    "owasp": "A01:2021-Broken Access Control",
    "cwe": "CWE-639"
  },
  {
    "id": "PY-OPEN-REDIRECT",
    "language": "python",
    "type": "taint-ast",
    "severity": "HIGH",
    "category": "Broken Access Control",
    "sources": ["request.args.get", "request.form.get"],
    "sinks": ["flask.redirect", "redirect_user"],
    "message": "Open Redirect: user input directly passed to redirect().",
    "suggestion": "Validate redirect targets against an allowlist of trusted domains.",
    "owasp": "A01:2021-Broken Access Control",
    "cwe": "CWE-601"
  },
  {
    "id": "PY-DIRECTORY-LISTING",
    "language": "python",
    "type": "regex",
    "severity": "MEDIUM",
    "category": "Broken Access Control",
    "pattern": "os\\.listdir\\(|directory_listing\\(",
    "message": "Directory listing may expose sensitive files or structure.",
    "suggestion": "Disable directory listing or restrict it to admins only.",
    "owasp": "A01:2021-Broken Access Control",
    "cwe": "CWE-548"
  },
  {
    "id": "PY-BUSINESS-LOGIC-BYPASS",
    "language": "python",
    "type": "context-ast",
    "severity": "HIGH",
    "category": "Broken Access Control",
    "sources": ["request.args.get", "request.form.get", "input"],
    "sinks": ["apply_discount", "price", "total"],
    "message": "Business Logic Bypass: discount or price calculation controlled by user input.",
    "suggestion": "Enforce server-side validation and restrict business rules to trusted values.",
    "owasp": "A01:2021-Broken Access Control",
    "cwe": "CWE-840"
  },
  {
    "id": "PY-WEAK-ENCRYPTION-KEY",
    "language": "python",
    "type": "regex",
    "severity": "HIGH",
    "category": "Cryptography",
    "pattern": "ENCRYPTION_KEY\\s*=\\s*['\\\"][A-Za-z0-9]{1,16}['\\\"]",
    "message": "Weak or hardcoded encryption key detected.",
    "suggestion": "Use environment variables or a secure key vault. Keys should be >= 256 bits.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-326"
  },
  {
    "id": "PY-STATIC-IV",
    "language": "python",
    "type": "context-ast",
    "severity": "HIGH",
    "category": "Cryptography",
    "sources": ["b'00000000'", "b'11111111'", "IV=", "iv="],
    "sinks": ["AES.new", "encrypt_data"],
    "message": "Static IV used in AES encryption → predictable ciphertext.",
    "suggestion": "Use a random IV for each encryption operation.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-329"
  },
  {
    "id": "PY-INSECURE-JWT-SECRET",
    "language": "python",
    "type": "regex",
    "severity": "CRITICAL",
    "category": "Authentication",
    "pattern": "JWT_SECRET\\s*=\\s*['\\\"][A-Za-z0-9]{1,16}['\\\"]",
    "message": "Insecure JWT secret (short, predictable, hardcoded).",
    "suggestion": "Use a long, random, and securely stored secret for JWT signing.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-798,CWE-347"
  },
  {
    "id": "PY-MISSING-CERT-VALIDATION",
    "language": "python",
    "type": "regex",
    "severity": "CRITICAL",
    "category": "Cryptography",
    "pattern": "requests\\.get\\([^)]*verify=False",
    "message": "SSL certificate validation is disabled.",
    "suggestion": "Enable certificate validation (verify=True) or use a trusted CA bundle.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-295"
  },
  {
    "id": "PY-SQLI",
    "language": "python",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Injection",
    "sources": ["request.args.get", "request.form.get", "input"],
    "sinks": ["cursor.execute", "cursor.executemany", "session.execute"],
    "message": "Possible SQL Injection: user input concatenated into SQL queries.",
    "suggestion": "Use parameterized queries or ORM query binding instead of string concatenation.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-89"
  },
  {
    "id": "PY-COMMAND-INJECTION",
    "language": "python",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Injection",
    "sources": ["request.args.get", "request.form.get", "input"],
    "sinks": ["os.system", "subprocess.run", "subprocess.call", "popen"],
    "message": "Command Injection: untrusted input passed to system command execution.",
    "suggestion": "Avoid shell=True; use subprocess with argument lists or safe APIs.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-78"
  },
  {
    "id": "PY-SSTI",
    "language": "python",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Injection",
    "sources": ["request.args.get", "request.form.get"],
    "sinks": ["render_template_string", "jinja2.Template"],
    "message": "Possible SSTI: user input is rendered as template code.",
    "suggestion": "Do not render user input as templates; use context variables instead.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-94"
  },
  {
    "id": "PY-CODE-INJECTION",
    "language": "python",
    "type": "regex",
    "severity": "CRITICAL",
    "category": "Injection",
    "pattern": "\\b(eval|exec)\\(",
    "message": "Code Injection: dangerous use of eval()/exec() detected.",
    "suggestion": "Avoid dynamic code execution. Use safe parsers or restricted execution contexts.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-94"
  },
  {
    "id": "PY-XXE",
    "language": "python",
    "type": "regex",
    "severity": "CRITICAL",
    "category": "Injection",
    "pattern": "xml\\.etree\\.ElementTree\\.parse\\(|ET\\.parse\\(|minidom\\.parse\\(",
    "message": "XXE vulnerability: XML parsed without disabling external entities.",
    "suggestion": "Disable external entity resolution (use defusedxml or configure parser securely).",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-611"
  },
  {
    "id": "PY-SSRF",
    "language": "python",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Injection",
    "sources": ["request.args.get", "request.form.get", "input"],
    "sinks": ["requests.get", "requests.post", "urllib.request.urlopen"],
    "message": "Possible SSRF: user-controlled input passed to HTTP request function.",
    "suggestion": "Validate and restrict URLs. Use an allowlist of trusted domains/IPs.",
    "owasp": "A10:2021-Server-Side Request Forgery",
    "cwe": "CWE-918"
  },
  {
    "id": "PY-WEAK-PASSWORD-RESET",
    "language": "python",
    "type": "regex",
    "severity": "CRITICAL",
    "category": "Authentication",
    "pattern": "reset_token\\s*=\\s*['\\\"][A-Za-z0-9]{4,12}['\\\"]",
    "message": "Weak password reset token (hardcoded or predictable).",
    "suggestion": "Use cryptographically secure random tokens (e.g., secrets.token_urlsafe).",
    "owasp": "A01:2021-Broken Access Control",
    "cwe": "CWE-640"
  },
  {
    "id": "PY-BUSINESS-LOGIC-FLAW",
    "language": "python",
    "type": "heuristic",
    "severity": "HIGH",
    "category": "Business Logic",
    "pattern": "transfer_funds\\(",
    "message": "Business Logic Flaw: transfer_funds() may lack authorization or limit checks.",
    "suggestion": "Ensure role-based access control and proper validation for business logic operations.",
    "owasp": "A01:2021-Broken Access Control",
    "cwe": "CWE-840"
  },
  {
    "id": "PY-DEBUG-MODE",
    "language": "python",
    "type": "regex",
    "severity": "HIGH",
    "category": "Configuration",
    "pattern": "app\\.run\\(.*debug\\s*=\\s*True.*\\)",
    "message": "Debug mode is enabled. This exposes stack traces and an interactive console in production.",
    "suggestion": "Disable debug mode in production. Use environment-specific settings.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-489,CWE-215"
  },
  {
    "id": "PY-INSECURE-COOKIE",
    "language": "python",
    "type": "heuristic",
    "severity": "HIGH",
    "category": "Session Management",
    "pattern": "set_cookie\\(",
    "message": "Cookie set without Secure or HttpOnly flags. This exposes cookies to theft via XSS or network sniffing.",
    "suggestion": "Always set cookies with Secure=True and HttpOnly=True.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-614,CWE-1004"
  },
  {
    "id": "PY-INSECURE-FILE-PERMISSIONS",
    "language": "python",
    "type": "regex",
    "severity": "MEDIUM",
    "category": "File Handling",
    "pattern": "0o777",
    "message": "Insecure file permissions (0o777) allow read/write/execute access by anyone.",
    "suggestion": "Restrict file permissions. Use least privilege (e.g., 0o600 or 0o640).",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-732"
  },
  {
    "id": "PY-DEFAULT-CONFIG",
    "language": "python",
    "type": "heuristic",
    "severity": "MEDIUM",
    "category": "Configuration",
    "pattern": "get_database_connection\\(",
    "message": "Default configuration detected (may include default credentials, insecure hostnames, or lack of encryption).",
    "suggestion": "Review and secure all default configurations before deploying to production.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-16"
  },
  {
    "id": "PY-SESSION-FIXATION",
    "language": "python",
    "type": "heuristic",
    "severity": "HIGH",
    "category": "Session Management",
    "pattern": "create_session\\(",
    "message": "Potential session fixation: create_session() may not regenerate session IDs on login.",
    "suggestion": "Regenerate session IDs after login and enforce secure session handling.",
    "owasp": "A07:2021-Identification and Authentication Failures",
    "cwe": "CWE-384"
  },
  {
    "id": "PY-INFINITE-SESSION",
    "language": "python",
    "type": "heuristic",
    "severity": "MEDIUM",
    "category": "Session Management",
    "pattern": "session\\.permanent\\s*=\\s*True",
    "message": "Infinite session lifetime detected. This increases the risk of stolen or hijacked sessions.",
    "suggestion": "Set session timeouts and enforce automatic session expiration.",
    "owasp": "A07:2021-Identification and Authentication Failures",
    "cwe": "CWE-613"
  },
  {
    "id": "PY-UNRESTRICTED-UPLOAD",
    "language": "python",
    "type": "heuristic",
    "severity": "CRITICAL",
    "category": "File Handling",
    "pattern": "upload_file\\(",
    "message": "Unrestricted file upload detected. Users may upload dangerous files (e.g., .php, .jsp, .exe).",
    "suggestion": "Validate file extensions and MIME types. Store uploads outside the webroot.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-434"
  },{
  "id": "JAVA-INSECURE-DESERIALIZATION",
  "language": "java",
  "type": "ast",
  "severity": "CRITICAL",
  "category": "Deserialization",
  "pattern": "new\\s+ObjectInputStream\\(",
  "message": "Insecure deserialization detected with ObjectInputStream. Deserializing untrusted data may lead to remote code execution.",
  "suggestion": "Avoid native Java deserialization. Use safer formats (e.g., JSON, Protobuf) and validate input before use.",
  "owasp": "A08:2021-Software and Data Integrity Failures",
  "cwe": "CWE-502"
},{
  "id": "PHP-INSECURE-DESERIALIZATION",
  "language": "php",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Deserialization",
  "pattern": "unserialize\\(",
  "message": "Insecure deserialization detected. PHP's unserialize() is dangerous with untrusted input.",
  "suggestion": "Avoid unserialize() on user input. Use JSON or other safe formats.",
  "owasp": "A08:2021-Software and Data Integrity Failures",
  "cwe": "CWE-502"
},{
  "id": "JS-INSECURE-DESERIALIZATION-001",
  "language": "javascript",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Insecure Deserialization",
  "pattern": "eval\\s*\\(\\s*JSON\\.parse",
  "message": "Insecure deserialization: eval() used with JSON.parse may allow remote code execution.",
  "suggestion": "Avoid using eval() on parsed JSON. Use JSON.parse safely without wrapping it in eval, and use trusted data sources.",
  "owasp": "A08:2021-Software and Data Integrity Failures",
  "cwe": "CWE-502"
}
,{
    "id": "PY-PATH-TRAVERSAL",
    "language": "python",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "File Handling",
    "pattern": "open\\(",
    "message": "Path Traversal detected. User-controlled input is used to construct a file path without sanitization.",
    "suggestion": "Validate and sanitize file paths. Use pathlib or allowlists to restrict file access.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-22"
  },
  {
    "id": "PY-RACE-CONDITION-TOCTOU",
    "language": "python",
    "type": "context-ast",
    "severity": "HIGH",
    "category": "Race Condition",
    "pattern": "os\\.path\\.exists|os\\.access|os\\.stat",
    "message": "Possible TOCTOU race condition: checking a file before use can be unsafe.",
    "suggestion": "Avoid separate existence checks. Use atomic file operations or open files directly with error handling.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-367"
  },
  {
    "id": "PY-WEAK-PRNG",
    "language": "python",
    "type": "heuristic",
    "severity": "HIGH",
    "category": "Cryptography",
    "pattern": "random\\.randint|random\\.random|random\\.choice",
    "message": "Weak PRNG detected. The random module is not cryptographically secure, making tokens predictable.",
    "suggestion": "Use secrets or os.urandom for generating security tokens instead of random.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-338"
  },
  {
    "id": "PY-SQLI",
    "language": "python",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Injection",
    "pattern": "execute\\(",
    "message": "Possible SQL Injection: User input flows into raw SQL query.",
    "suggestion": "Use parameterized queries. Avoid string concatenation in SQL statements.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-89"
  },
  {
    "id": "PY-COMMAND-INJECTION",
    "language": "python",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Injection",
    "pattern": "subprocess\\.run\\(.*shell=True",
    "message": "Command Injection: User input flows into subprocess with shell=True, enabling arbitrary code execution.",
    "suggestion": "Avoid shell=True. Pass arguments as a list to subprocess.run() or use shlex.quote() for sanitization.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-78"
  },
  {
    "id": "PY-INSECURE-DESERIALIZATION",
    "language": "python",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Deserialization",
    "pattern": "pickle\\.loads\\(",
    "message": "Insecure deserialization detected. pickle.loads() can execute arbitrary code when fed untrusted data.",
    "suggestion": "Never use pickle.loads() on untrusted input. Use safer formats like JSON.",
    "owasp": "A08:2021-Software and Data Integrity Failures",
    "cwe": "CWE-502"
  },
  {
    "id": "PY-SSRF",
    "language": "python",
    "type": "taint-ast",
    "severity": "HIGH",
    "category": "Networking",
    "pattern": "urllib\\.request\\.urlopen\\(",
    "message": "SSRF detected. User input is used to fetch an external URL, which may allow access to internal services.",
    "suggestion": "Validate and restrict allowed domains. Use allowlists and sanitize URLs before requesting.",
    "owasp": "A10:2021-Server-Side Request Forgery",
    "cwe": "CWE-918"
  },
  {
    "id": "PY-XXE",
    "language": "python",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "XML Processing",
    "pattern": "xml\\.etree\\.ElementTree\\.fromstring\\(",
    "message": "XXE detected. Parsing XML without disabling external entities can allow file disclosure or SSRF.",
    "suggestion": "Use defusedxml or disable external entities when parsing XML.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-611"
  },
  {
    "id": "PY-SSTI",
    "language": "python",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Injection",
    "pattern": "render_template_string\\(",
    "message": "Server-Side Template Injection (SSTI). User input rendered directly in template context may allow remote code execution.",
    "suggestion": "Avoid rendering user-controlled input. Use safe template variables and context separation.",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-94"
  },
  {
    "id": "PY-UNRESTRICTED-FILE-UPLOAD",
    "language": "python",
    "type": "context-ast",
    "severity": "CRITICAL",
    "category": "File Upload",
    "pattern": "request\\.files|get\\_file\\_stream|os\\.chmod",
    "message": "Unrestricted File Upload detected. File type/extension is not validated and insecure permissions are used.",
    "suggestion": "Restrict allowed file types, validate file extensions, and avoid insecure permissions. Store uploads outside webroot.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-434"
  },
  {
    "id": "PY-OPEN-REDIRECT",
    "language": "python",
    "type": "taint-ast",
    "severity": "HIGH",
    "category": "Access Control",
    "pattern": "flask\\.redirect\\(",
    "message": "Open Redirect detected. User-controlled input passed to redirect() without validation.",
    "suggestion": "Validate redirect targets against a whitelist. Avoid directly redirecting based on user input.",
    "owasp": "A01:2021-Broken Access Control",
    "cwe": "CWE-601"
  },
  {
    "id": "PY-YAML-DESERIALIZATION",
    "language": "python",
    "type": "regex",
    "severity": "CRITICAL",
    "category": "Deserialization",
    "pattern": "yaml\\.load\\(",
    "message": "Insecure YAML deserialization detected. yaml.load() with unsafe Loader allows code execution.",
    "suggestion": "Use yaml.safe_load() instead of yaml.load() with untrusted input.",
    "owasp": "A08:2021-Software and Data Integrity Failures",
    "cwe": "CWE-502"
  },
  {
  "id": "PY-HARDCODED-CREDS",
  "language": "python",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Authentication",
  "pattern": "if\\s+username\\s*==\\s*['\"].+['\"]\\s+and\\s+password\\s*==\\s*['\"].+['\"]",
  "message": "Hardcoded credentials detected in authentication logic.",
  "suggestion": "Remove hardcoded usernames/passwords. Use environment variables, secrets managers, or hashed values in a secure backend.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-798"
}
,
  {
    "id": "PY-WEAK-HASH-MD5",
    "language": "python",
    "type": "regex",
    "severity": "HIGH",
    "category": "Cryptography",
    "pattern": "hashlib\\.md5\\(",
    "message": "Weak hashing detected: MD5 is cryptographically broken and unsuitable for passwords or integrity checks.",
    "suggestion": "Use SHA-256, SHA-3, or a password hashing algorithm like bcrypt, Argon2, or PBKDF2.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-327"
  },
  {
    "id": "PY-STATIC-IV",
    "language": "python",
    "type": "context-ast",
    "severity": "CRITICAL",
    "category": "Cryptography",
    "pattern": "Cipher\\(",
    "message": "Static IV detected in AES encryption. Using a predictable or reused IV breaks CBC mode security.",
    "suggestion": "Always generate a random IV with os.urandom() or secrets.token_bytes() for each encryption operation.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-329"
  },
  {
    "id": "PY-INCORRECT-PERMISSIONS",
    "language": "python",
    "type": "regex",
    "severity": "HIGH",
    "category": "Access Control",
    "pattern": "os\\.chmod\\(.*0o777\\)",
    "message": "Insecure file permissions detected (chmod 0777). Files are world-writable and executable.",
    "suggestion": "Use least privilege (e.g., 0o600 or 0o640) when setting file permissions.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-732"
  },
  {
    "id": "PY-INSECURE-SSL",
    "language": "python",
    "type": "regex",
    "severity": "CRITICAL",
    "category": "SSL/TLS",
    "pattern": "ssl\\.create_default_context\\(.*verify_mode=ssl\\.CERT_NONE",
    "message": "Insecure SSL/TLS configuration: certificate validation is disabled.",
    "suggestion": "Enable certificate validation. Do not set verify_mode=CERT_NONE in production.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-295"
  },
  {
    "id": "PY-DEBUG-MODE",
    "language": "python",
    "type": "regex",
    "severity": "HIGH",
    "category": "Configuration",
    "pattern": "app\\.run\\(.*debug=True",
    "message": "Debug mode is enabled in production. This exposes stack traces and allows interactive code execution.",
    "suggestion": "Disable debug mode in production. Use proper logging and error handling.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "CWE-489, CWE-215"
  },{
  "id": "JAVA-XSS",
  "language": "java",
  "type": "taint-ast",
  "severity": "CRITICAL",
  "category": "Injection",
  "pattern": "out\\.print|response\\.getWriter\\(\\)\\.write",
  "message": "Potential XSS: User-controlled input written directly to HTTP response.",
  "suggestion": "Use output encoding (e.g., OWASP ESAPI) or templating frameworks with auto-escaping.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79"
},{
  "id": "PHP-XSS",
  "language": "php",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Injection",
  "pattern": "echo\\s*\\$_(GET|POST|REQUEST)\\[",
  "message": "Reflected XSS detected: Echoing unsanitized user input.",
  "suggestion": "Use htmlspecialchars() or templating libraries that escape output by default.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79"
},{
  "id": "JS-XSS-001",
  "language": "javascript",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Cross-Site Scripting (XSS)",
  "pattern": "document\\.write\\s*\\(|innerHTML\\s*=|outerHTML\\s*=",
  "message": "Potential DOM XSS: User input written directly to the DOM without sanitization.",
  "suggestion": "Avoid using document.write/innerHTML/outerHTML with untrusted input. Use textContent, setAttribute, or sanitize input with libraries like DOMPurify.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79"
}
,{
  "id": "JAVA-HARDCODED-CREDS",
  "language": "java",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Authentication",
  "pattern": "if\\s*\\(.*equals\\(\".*\"\\).*\\)",
  "message": "Hardcoded credentials detected in Java conditional logic.",
  "suggestion": "Remove hardcoded credentials; use environment variables or secure configuration.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-798"
},{
  "id": "PHP-HARDCODED-CREDS",
  "language": "php",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Authentication",
  "pattern": "if\\s*\\(.*===\\s*['\\\"]admin['\\\"]\\)",
  "message": "Hardcoded credentials detected in authentication check.",
  "suggestion": "Store credentials securely (e.g., env vars, config files) not in source code.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-798"
},{
  "id": "JS-HARDCODED-CREDS-001",
  "language": "javascript",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Authentication",
  "pattern": "(['\"][aA]dmin['\"]|['\"][pP]assword['\"]|['\"][sS]ecret['\"])",
  "message": "Hardcoded credentials or secrets detected in JavaScript logic.",
  "suggestion": "Do not hardcode usernames, passwords, or secrets in client-side or server-side code. Use secure environment variables, vaults, or API tokens.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-798"
}
,{
  "id": "JAVA-WEAK-HASH-MD5",
  "language": "java",
  "type": "regex",
  "severity": "HIGH",
  "category": "Cryptography",
  "pattern": "MessageDigest\\.getInstance\\(\"MD5\"\\)",
  "message": "Weak hashing algorithm MD5 detected.",
  "suggestion": "Use SHA-256, SHA-3, or Argon2 for password hashing.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-327"
},{
  "id": "JAVA-STATIC-IV",
  "language": "java",
  "type": "context-ast",
  "severity": "CRITICAL",
  "category": "Cryptography",
  "pattern": "IvParameterSpec\\(new byte",
  "message": "Static IV detected in AES encryption.",
  "suggestion": "Always use a random IV with SecureRandom.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-329"
},{
  "id": "PHP-WEAK-HASH-MD5",
  "language": "php",
  "type": "regex",
  "severity": "HIGH",
  "category": "Cryptography",
  "pattern": "md5\\(",
  "message": "MD5 is insecure and should not be used for password hashing.",
  "suggestion": "Use password_hash() with bcrypt or Argon2.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-327"
},{
  "id": "JS-WEAK-HASH-MD5-001",
  "language": "javascript",
  "type": "regex",
  "severity": "HIGH",
  "category": "Cryptography",
  "pattern": "crypto\\.(createHash|createHmac)\\s*\\(\\s*['\"]md5['\"]\\s*\\)",
  "message": "Weak cryptographic hash detected (MD5). It is vulnerable to collisions and should not be used.",
  "suggestion": "Use SHA-256 for general hashing, or bcrypt/argon2/scrypt for password hashing.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-327"
}
,{
  "id": "PHP-INSECURE-FILE-PERMISSIONS",
  "language": "php",
  "type": "regex",
  "severity": "HIGH",
  "category": "Access Control",
  "pattern": "chmod\\(.*0777",
  "message": "Insecure file permissions (0777) detected.",
  "suggestion": "Use secure permissions (0640, 0600) for files.",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-732"
},{
  "id": "JS-INSECURE-FILE-PERMISSIONS-001",
  "language": "javascript",
  "type": "regex",
  "severity": "HIGH",
  "category": "Access Control",
  "pattern": "fs\\.(chmod|chmodSync)\\s*\\([^)]*0o777",
  "message": "Insecure file permissions detected (0o777 → world-readable and writable).",
  "suggestion": "Avoid using 0o777. Apply least privilege file permissions such as 0o600 or 0o640.",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-732"
}
,{
  "id": "JAVA-DEBUG-MODE",
  "language": "java",
  "type": "regex",
  "severity": "HIGH",
  "category": "Configuration",
  "pattern": "spring\\.profiles\\.active=dev",
  "message": "Application is running with debug/dev profile enabled.",
  "suggestion": "Disable debug/prod mixup. Use separate configuration for production.",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-489"
},{
  "id": "PHP-DEBUG-MODE",
  "language": "php",
  "type": "regex",
  "severity": "HIGH",
  "category": "Configuration",
  "pattern": "ini_set\\(['\\\"]display_errors['\\\"],\\s*['\\\"]On['\\\"]\\)",
  "message": "Debug mode (display_errors) enabled in PHP.",
  "suggestion": "Disable display_errors in production. Log errors securely instead.",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-489"
},{
  "id": "JS-DEBUG-MODE-001",
  "language": "javascript",
  "type": "regex",
  "severity": "HIGH",
  "category": "Configuration",
  "pattern": "app\\.use\\(\\s*errorhandler\\(\\s*\\)\\s*\\)",
  "message": "Express debug error handler enabled → should not be used in production.",
  "suggestion": "Disable errorhandler() in production; use proper logging and generic error responses instead.",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-489"
}
,{
  "id": "JAVA-HARDCODED-CREDENTIALS",
  "language": "java",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Authentication",
  "cwe": "CWE-798",
  "owasp": "A02:2021-Cryptographic Failures",
  "pattern": "(username|user|password|pwd|secret)\\s*=\\s*\"[^\"]+\"",
  "message": "Hardcoded credential detected in source code.",
  "suggestion": "Remove hardcoded credentials. Use environment variables, secrets vaults, or secure config files."
},{
  "id": "JAVA-BROKEN-ACCESS-CONTROL",
  "language": "java",
  "type": "heuristic",
  "severity": "CRITICAL",
  "category": "Access Control",
  "cwe": "CWE-284",
  "owasp": "A01:2021-Broken Access Control",
  "pattern": "if\\s*\\(.*role.*==.*\\)|request\\.getParameter\\(\"role\"\\)",
  "message": "Access control decision based on user-supplied input (e.g., role or permission).",
  "suggestion": "Enforce server-side access controls using frameworks or centralized authorization, not user-controlled input."
},{
  "id": "JAVA-SESSION-FIXATION",
  "language": "java",
  "type": "context-ast",
  "severity": "HIGH",
  "category": "Session Management",
  "cwe": "CWE-384",
  "owasp": "A07:2021-Identification and Authentication Failures",
  "nodeType": "MethodInvocation",
  "calleeName": "setAttribute",
  "message": "Session attribute set without regenerating session ID. This may allow session fixation attacks.",
  "suggestion": "Regenerate session IDs after login using request.changeSessionId() or session.invalidate() + new session."
},{
  "id": "JAVA-PLAINTEXT-PASSWORD",
  "language": "java",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Cryptography",
  "cwe": "CWE-256",
  "owasp": "A02:2021-Cryptographic Failures",
  "pattern": "String\\s+password\\s*=\\s*request\\.getParameter\\(|String\\s+password\\s*=\\s*\".*\"",
  "message": "Plaintext password stored or transmitted without encryption.",
  "suggestion": "Never store or transmit passwords in plaintext. Use strong password hashing (bcrypt, PBKDF2, Argon2) and TLS for transmission."
},{
  "id": "JAVA-INSECURE-FILE-OVERWRITE",
  "language": "java",
  "type": "regex",
  "severity": "HIGH",
  "category": "File Handling",
  "cwe": "CWE-732",
  "owasp": "A05:2021-Security Misconfiguration",
  "pattern": "new\\s+FileOutputStream\\(.*true\\)|new\\s+FileWriter\\(.*true\\)",
  "message": "File opened in append/overwrite mode — may allow configuration or data tampering.",
  "suggestion": "Restrict write permissions, validate file paths, and avoid overwriting sensitive config files."
},{
  "id": "JAVA-INSECURE-CONFIG-LOADING",
  "language": "java",
  "type": "regex",
  "severity": "HIGH",
  "category": "Configuration",
  "cwe": "CWE-829",
  "owasp": "A05:2021-Security Misconfiguration",
  "pattern": "new\\s+Properties\\(\\)|props\\.load\\(new\\s+FileInputStream",
  "message": "Configuration loaded directly from file without validation. Could be tampered with.",
  "suggestion": "Protect config files with strict permissions. Validate integrity (hash/signature) before loading."
},{
  "id": "JAVA-BROKEN-ACCESS-CONTROL",
  "language": "java",
  "type": "heuristic",
  "severity": "CRITICAL",
  "category": "Access Control",
  "cwe": "CWE-284",
  "owasp": "A01:2021-Broken Access Control",
  "pattern": "public\\s+.*admin.*\\(.*\\)\\s*\\{[^}]*\\}",  
  "message": "Potential broken access control: admin functionality exposed without authorization checks.",
  "suggestion": "Add explicit role/permission validation before executing admin logic (e.g., `if (!user.isAdmin()) throw new AccessDeniedException();`)."
},{
  "id": "JAVA-PLAINTEXT-PASSWORD-STORAGE",
  "language": "java",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Authentication",
  "cwe": "CWE-256",
  "owasp": "A07:2021-Identification and Authentication Failures",
  "pattern": "(String\\s+password\\s*=\\s*\"[^\"]+\"|password\\s*==\\s*\"[^\"]+\")",
  "message": "Plaintext password storage or comparison detected.",
  "suggestion": "Use secure password hashing algorithms (bcrypt, Argon2, PBKDF2). Never store or compare plaintext passwords."
},{
  "id": "JAVA-INSECURE-FILE-OVERWRITE",
  "language": "java",
  "type": "regex",
  "severity": "HIGH",
  "category": "File Handling",
  "cwe": "CWE-732",
  "owasp": "A08:2021-Software and Data Integrity Failures",
  "pattern": "new\\s+(FileWriter|FileOutputStream)\\(.*(config|\\.properties).*\\)",
  "message": "Insecure file overwrite detected: sensitive config file may be overwritten.",
  "suggestion": "Do not allow user-controlled input to overwrite configuration files. Write to safe directories and enforce strict file permissions."
},{
  "id": "JAVA-BROKEN-ACCESS-CONTROL",
  "language": "java",
  "type": "context-ast",
  "severity": "CRITICAL",
  "category": "Access Control",
  "cwe": "CWE-284",
  "owasp": "A01:2021-Broken Access Control",
  "pattern": "function_no_auth_check",
  "message": "Potential broken access control: Sensitive method (e.g., adminPanel) lacks role/permission validation.",
  "suggestion": "Add role/permission validation (e.g., `if (!user.isAdmin()) throw new AccessDeniedException();`)."
},{
  "id": "JAVA-PLAINTEXT-PASSWORD",
  "language": "java",
  "type": "taint-ast",
  "severity": "CRITICAL",
  "category": "Authentication",
  "cwe": "CWE-256",
  "owasp": "A07:2021-Identification and Authentication Failures",
  "pattern": "plaintext_password_flow",
  "message": "Password is stored or compared in plaintext instead of hashed.",
  "suggestion": "Use secure password hashing algorithms (bcrypt, Argon2, PBKDF2). Never compare against plaintext."
},{
  "id": "JAVA-BROKEN-ACCESS-CONTROL",
  "language": "java",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Access Control",
  "cwe": "CWE-284",
  "owasp": "A01:2021-Broken Access Control",
  "pattern": "void\\s+(admin\\w*)\\s*\\(",
  "message": "Potential broken access control: Method `{match}` may be missing role/permission validation.",
  "suggestion": "Ensure that sensitive methods (like adminPanel) enforce role checks, e.g., `if (!\"admin\".equals(session.getAttribute(\"role\"))) throw new AccessDeniedException();`."
},{
  "id": "JAVA-PLAINTEXT-PASSWORD",
  "language": "java",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Authentication",
  "cwe": "CWE-256",
  "owasp": "A07:2021-Identification and Authentication Failures",
  "pattern": "password['\"]?\\s*\\+",
  "message": "Password is used in plaintext comparison or SQL concatenation instead of secure hashing.",
  "suggestion": "Store and compare only hashed passwords. Use bcrypt/Argon2 with salts instead of direct string comparison."
},{
  "id": "TAINT-PLAINTEXT-PASSWORD",
  "language": "java",
  "type": "taint-ast",
  "severity": "CRITICAL",
  "category": "Authentication",
  "cwe": "CWE-256",
  "owasp": "A07:2021-Identification and Authentication Failures",
  "pattern": "user_input_password_to_sql",
  "message": "User-controlled password flows directly into SQL comparison without hashing.",
  "suggestion": "Always hash passwords before storing or verifying. Use strong algorithms like bcrypt/argon2 and parameterized queries."
},{
  "id": "HEURISTIC-PLAINTEXT-PASSWORD",
  "language": "java",
  "type": "heuristic",
  "severity": "CRITICAL",
  "category": "Authentication",
  "cwe": "CWE-256",
  "owasp": "A07:2021-Identification and Authentication Failures",
  "pattern": "password_without_hashing",
  "message": "Password handling without hashing detected. File contains password usage but no hashing functions.",
  "suggestion": "Implement secure password hashing (bcrypt/argon2). Never store or compare raw passwords."
},{
  "id": "CONTEXT-PLAINTEXT-PASSWORD",
  "language": "java",
  "type": "context-ast",
  "severity": "CRITICAL",
  "category": "Authentication",
  "cwe": "CWE-256",
  "owasp": "A07:2021-Identification and Authentication Failures",
  "pattern": "sql_query_with_password_plaintext",
  "message": "Password field is used in SQL query without hashing. Plaintext comparison detected.",
  "suggestion": "Do not compare plaintext passwords. Hash them at rest and verify using libraries like BCrypt.checkpw() or Argon2."
},{
  "id": "AST-PLAINTEXT-PASSWORD",
  "language": "java",
  "type": "ast",
  "severity": "CRITICAL",
  "category": "Authentication",
  "cwe": "CWE-256",
  "owasp": "A07:2021-Identification and Authentication Failures",
  "pattern": "binary_expression_with_password",
  "message": "Password is directly compared/stored in SQL without hashing.",
  "suggestion": "Hash passwords with bcrypt/Argon2 and use parameterized queries to compare only hashes."
},{
  "id": "PLAINTEXT-PASSWORD-SQL",
  "language": "java",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Authentication",
  "cwe": "CWE-256",
  "owasp": "A07:2021-Identification and Authentication Failures",
  "pattern": "password\\s*[=]+\\s*['\\\"]?\\s*\\+",
  "message": "Password compared or stored in plaintext inside SQL query.",
  "suggestion": "Never compare or store passwords in plaintext. Use bcrypt, Argon2, or PBKDF2 for hashing and compare hashed values."
},{
  "id": "JAVA-HARDCODED-API-KEY",
  "language": "java",
  "type": "regex",
  "severity": "CRITICAL",
  "category": "Secrets Management",
  "cwe": "CWE-798",
  "owasp": "A07:2021-Identification and Authentication Failures",
  "pattern": "(API_KEY|SECRET|TOKEN)\\s*=\\s*\"[A-Za-z0-9+/=]{16,}\"",
  "message": "Hardcoded API key or secret detected in source code.",
  "suggestion": "Remove hardcoded API keys/secrets. Store them securely in environment variables or a secrets manager."
},{
  "id": "JAVA-INSECURE-RANDOMNESS",
  "language": "java",
  "type": "regex",
  "severity": "HIGH",
  "category": "Cryptography",
  "cwe": "CWE-338",
  "owasp": "A02:2021-Cryptographic Failures",
  "pattern": "new\\s+Random\\s*\\(",
  "message": "Insecure randomness: java.util.Random should not be used for security-sensitive operations.",
  "suggestion": "Use java.security.SecureRandom for all security-critical random values (tokens, keys, etc.)."
},{
  "id": "JAVA-PATH-TRAVERSAL",
  "language": "java",
  "type": "context-ast",
  "severity": "CRITICAL",
  "category": "File Handling",
  "cwe": "CWE-22",
  "owasp": "A05:2021-Security Misconfiguration",
  "pattern": "file_path_from_user_input",
  "message": "Potential Path Traversal: User-controlled input used in file path construction.",
  "suggestion": "Validate and sanitize all user input before using it in file operations. Use whitelisting or libraries like Apache Commons IO FilenameUtils.getName()."
},{
  "id": "JAVA-XSS-REFLECTED",
  "language": "java",
  "type": "taint-ast",
  "severity": "CRITICAL",
  "category": "Cross-Site Scripting",
  "cwe": "CWE-79",
  "owasp": "A03:2021-Injection",
  "pattern": "response_writer_print_user_input",
  "message": "Reflected XSS: User input flows directly into HttpServletResponse output without sanitization.",
  "suggestion": "Sanitize user inputs before output using libraries like OWASP Java Encoder (`Encode.forHtml()`). Avoid directly echoing request parameters."
},{
    "id": "JAVA-XSS-REFLECTED",
    "language": "java",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Cross-Site Scripting",
    "cwe": "CWE-79",
    "owasp": "A03:2021-Injection",
    "pattern": "response_writer_print_user_input",
    "message": "Reflected XSS: User input flows directly into HttpServletResponse output without sanitization.",
    "suggestion": "Sanitize user inputs before output using libraries like OWASP Java Encoder (`Encode.forHtml()`). Avoid directly echoing request parameters."
  },
  {
    "id": "JAVA-SQL-INJECTION",
    "language": "java",
    "type": "context-ast",
    "severity": "CRITICAL",
    "category": "SQL Injection",
    "cwe": "CWE-89",
    "owasp": "A03:2021-Injection",
    "pattern": "statement_execute_user_input",
    "message": "SQL Injection: User input is concatenated into SQL statements without parameterization.",
    "suggestion": "Use PreparedStatement with placeholders and parameterized queries to safely handle user input."
  },
  {
    "id": "JAVA-COMMAND-INJECTION",
    "language": "java",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Command Injection",
    "cwe": "CWE-77",
    "owasp": "A03:2021-Injection",
    "pattern": "runtime_exec_user_input",
    "message": "Command Injection: User input flows into Runtime.exec() or ProcessBuilder without validation.",
    "suggestion": "Avoid executing OS commands with user input. If necessary, validate and whitelist inputs rigorously."
  },
  {
    "id": "JAVA-HARDCODED-SECRET",
    "language": "java",
    "type": "regex",
    "severity": "CRITICAL",
    "category": "Hardcoded Secrets",
    "cwe": "CWE-798",
    "owasp": "A05:2021-Security Misconfiguration",
    "pattern": "(?i)(password|secret|api[_-]?key|token)\\s*=\\s*\"[^\"]+\"",
    "message": "Hardcoded Secret: Sensitive information like API keys, passwords, or tokens are embedded in source code.",
    "suggestion": "Store secrets in environment variables or secure vaults. Never commit secrets into source code."
  },
  {
    "id": "JAVA-PATH-TRAVERSAL",
    "language": "java",
    "type": "context-ast",
    "severity": "HIGH",
    "category": "Path Traversal",
    "cwe": "CWE-22",
    "owasp": "A05:2021-Security Misconfiguration",
    "pattern": "file_access_user_input",
    "message": "Path Traversal: User input controls file paths, potentially allowing access to unauthorized files.",
    "suggestion": "Validate and normalize file paths, restrict access to intended directories, and avoid directly appending user input to file paths."
  },
  {
    "id": "JAVA-INSECURE-RANDOMNESS",
    "language": "java",
    "type": "heuristic",
    "severity": "HIGH",
    "category": "Cryptographic Failures",
    "cwe": "CWE-338",
    "owasp": "A02:2021-Cryptographic Failures",
    "pattern": "java\\.util\\.Random",
    "message": "Insecure Randomness: java.util.Random used for security-sensitive tokens. It is predictable.",
    "suggestion": "Use java.security.SecureRandom for generating cryptographically secure tokens."
  },
  {
    "id": "JAVA-SESSION-FIXATION",
    "language": "java",
    "type": "taint-ast",
    "severity": "HIGH",
    "category": "Broken Authentication",
    "cwe": "CWE-384",
    "owasp": "A07:2021-Identification and Authentication Failures",
    "pattern": "session_set_attribute_without_regeneration",
    "message": "Session Fixation: Session attributes set without regenerating session ID after authentication.",
    "suggestion": "Regenerate session ID after login using `HttpSession.invalidate()` and creating a new session."
  },
  {
    "id": "JAVA-INSECURE-DESERIALIZATION",
    "language": "java",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Insecure Deserialization",
    "cwe": "CWE-502",
    "owasp": "A08:2021-Software and Data Integrity Failures",
    "pattern": "object_input_stream_read_object_user_input",
    "message": "Insecure Deserialization: Deserializing objects from untrusted sources can lead to remote code execution.",
    "suggestion": "Avoid Java serialization on untrusted data. Use safe formats like JSON or XML with validation."
  },
  {
    "id": "JAVA-PLAINTEXT-PASSWORD",
    "language": "java",
    "type": "ast",
    "severity": "CRITICAL",
    "category": "Sensitive Data Exposure",
    "cwe": "CWE-259",
    "owasp": "A07:2021-Identification and Authentication Failures",
    "pattern": "password_stored_in_plaintext",
    "message": "Plaintext Password: Storing or comparing passwords in plaintext is insecure.",
    "suggestion": "Hash passwords using strong algorithms (bcrypt, Argon2) before storing and use secure comparison methods."
  },{
    "id": "JAVA-XSS-REFLECTED",
    "language": "java",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Cross-Site Scripting",
    "cwe": "CWE-79",
    "owasp": "A03:2021-Injection",
    "pattern": "response_writer_print_user_input",
    "message": "Reflected XSS: User input flows directly into HttpServletResponse output without sanitization.",
    "suggestion": "Sanitize user inputs using OWASP Java Encoder (`Encode.forHtml()`) or escape HTML entities before rendering."
  },
  {
    "id": "JAVA-XSS-REFLECTED-HEURISTIC",
    "language": "java",
    "type": "heuristic",
    "severity": "HIGH",
    "category": "Cross-Site Scripting",
    "cwe": "CWE-79",
    "owasp": "A03:2021-Injection",
    "pattern": ".*response\\.getWriter\\(\\)\\.println\\(.*request\\.getParameter\\(",
    "message": "Potential Reflected XSS: User input is directly echoed to response without validation.",
    "suggestion": "Validate or escape request parameters before writing to the response."
  },
  {
    "id": "JAVA-PATH-TRAVERSAL",
    "language": "java",
    "type": "context-ast",
    "severity": "CRITICAL",
    "category": "Path Traversal",
    "cwe": "CWE-22",
    "owasp": "A05:2021-Security Misconfiguration",
    "pattern": "file_access_user_input",
    "message": "Path Traversal: User input is used to construct file paths without validation.",
    "suggestion": "Validate and normalize user-supplied paths, restrict to allowed directories, and avoid concatenating user input into file paths."
  },
  {
    "id": "JAVA-PATH-TRAVERSAL-REGEX",
    "language": "java",
    "type": "regex",
    "severity": "HIGH",
    "category": "Path Traversal",
    "cwe": "CWE-22",
    "owasp": "A05:2021-Security Misconfiguration",
    "pattern": "new\\s+File\\s*\\(\\s*\"[^\"]*\"\\s*\\+\\s*request\\.getParameter\\(",
    "message": "Potential Path Traversal: File constructed from user input via request parameter.",
    "suggestion": "Use strict whitelists and canonical paths to prevent access outside intended directories."
  },
  {
    "id": "JAVA-XSS-CONTEXT-AST",
    "language": "java",
    "type": "context-ast",
    "severity": "HIGH",
    "category": "Cross-Site Scripting",
    "cwe": "CWE-79",
    "owasp": "A03:2021-Injection",
    "pattern": "response_writer_append_user_input",
    "message": "Reflected XSS detected in context-aware AST analysis: User input flows into HTTP response.",
    "suggestion": "Escape or encode user input based on the context (HTML, JavaScript, URL) before rendering."
  },{
    "id": "JAVA-PATH-TRAVERSAL-CTX-AST",
    "language": "java",
    "type": "context-ast",
    "severity": "CRITICAL",
    "category": "Path Traversal",
    "cwe": "CWE-22",
    "owasp": "A05:2021-Security Misconfiguration",
    "pattern": "file_access_user_input",
    "message": "Path Traversal: User input is used to construct file paths without validation.",
    "suggestion": "Validate and normalize user-supplied paths, restrict to allowed directories, and avoid concatenating user input into file paths."
  },
  {
    "id": "JAVA-PATH-TRAVERSAL-REGEX",
    "language": "java",
    "type": "regex",
    "severity": "HIGH",
    "category": "Path Traversal",
    "cwe": "CWE-22",
    "owasp": "A05:2021-Security Misconfiguration",
    "pattern": "new\\s+File\\s*\\(\\s*\"[^\"]*\"\\s*\\+\\s*request\\.getParameter\\(",
    "message": "Potential Path Traversal: File constructed from user input via request parameter.",
    "suggestion": "Use strict whitelists and canonical paths to prevent access outside intended directories."
  },
  {
    "id": "JAVA-XSS-REFLECTED-TAINT",
    "language": "java",
    "type": "taint-ast",
    "severity": "CRITICAL",
    "category": "Cross-Site Scripting",
    "cwe": "CWE-79",
    "owasp": "A03:2021-Injection",
    "pattern": "response_writer_print_user_input",
    "message": "Reflected XSS: User input flows directly into HttpServletResponse output without sanitization.",
    "suggestion": "Sanitize user inputs using OWASP Java Encoder (`Encode.forHtml()`) or escape HTML entities before rendering."
  },
  {
    "id": "JAVA-XSS-REFLECTED-HEURISTIC",
    "language": "java",
    "type": "heuristic",
    "severity": "HIGH",
    "category": "Cross-Site Scripting",
    "cwe": "CWE-79",
    "owasp": "A03:2021-Injection",
    "pattern": ".*response\\.getWriter\\(\\)\\.println\\(.*request\\.getParameter\\(",
    "message": "Potential Reflected XSS: User input is directly echoed to response without validation.",
    "suggestion": "Validate or escape request parameters before writing to the response."
  },
  {
    "id": "JAVA-XSS-REFLECTED-CONTEXT-AST",
    "language": "java",
    "type": "context-ast",
    "severity": "HIGH",
    "category": "Cross-Site Scripting",
    "cwe": "CWE-79",
    "owasp": "A03:2021-Injection",
    "pattern": "response_writer_append_user_input",
    "message": "Reflected XSS detected in context-aware AST analysis: User input flows into HTTP response.",
    "suggestion": "Escape or encode user input based on the context (HTML, JavaScript, URL) before rendering."
  },{
  "id": "PY-SENSITIVE-LOGGING",
  "language": "python",
  "type": "regex",
  "severity": "MEDIUM",
  "category": "Logging",
  "pattern": "(logging\\.(info|debug|warning)|print)\\(.*(password|secret|token|api_key|ssn).*\\)",
  "message": "Sensitive information is being logged.",
  "suggestion": "Avoid logging secrets, tokens, or passwords. Sanitize logs before writing.",
  "owasp": "A09:2021-Security Logging and Monitoring Failures",
  "cwe": "CWE-532"
},{
  "id": "PY-SESSION-FIXATION",
  "language": "python",
  "type": "regex",
  "severity": "HIGH",
  "category": "Session Management",
  "pattern": "session\\[.*\\]\\s*=\\s*request\\.form.*",
  "message": "Possible session fixation vulnerability. Session values are set directly from user input.",
  "suggestion": "Regenerate session IDs after login. Avoid directly assigning request data to session.",
  "owasp": "A07:2021-Identification and Authentication Failures",
  "cwe": "CWE-384"
},{
  "id": "PY-INSUFFICIENT-SESSION-EXPIRATION",
  "language": "python",
  "type": "regex",
  "severity": "MEDIUM",
  "category": "Session Management",
  "pattern": "app\\.config\\['PERMANENT_SESSION_LIFETIME'\\]\\s*=\\s*(None|0)",
  "message": "Session expiration is missing or disabled.",
  "suggestion": "Set a reasonable session timeout (e.g., 15-30 minutes of inactivity).",
  "owasp": "A07:2021-Identification and Authentication Failures",
  "cwe": "CWE-613"
},{
  "id": "PY-XSS-REFLECTED",
  "language": "python",
  "type": "regex",
  "severity": "HIGH",
  "category": "XSS",
  "pattern": "return\\s+request\\.(args|get_json|get_data)\\(\\)",
  "message": "Reflected XSS vulnerability. User input is returned directly in the response.",
  "suggestion": "Sanitize or escape user input before returning it in the response.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79"
},{
  "id": "PY-UNCONTROLLED-MEMORY-ALLOCATION",
  "language": "python",
  "type": "regex",
  "severity": "HIGH",
  "category": "Denial of Service",
  "pattern": "(bytearray|\\[0\\])\\s*\\*\\s*request\\.(args|get_json|get_data)\\(",
  "message": "Potential uncontrolled memory allocation from user input.",
  "suggestion": "Validate and limit size values before allocating memory from user input.",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-789"
},{
  "id": "PY-INTEGER-OVERFLOW",
  "language": "python",
  "type": "regex",
  "severity": "MEDIUM",
  "category": "Data Validation",
  "pattern": "struct\\.pack\\(.*int\\(request\\.(args|get_json|get_data)\\(\\)\\).*\\)",
  "message": "Possible integer overflow from user-controlled input used in struct/binary operations.",
  "suggestion": "Validate numeric ranges on user input before packing or allocation.",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-190"
},{
  "id": "PY-BUSINESS-LOGIC",
  "language": "python",
  "type": "regex",
  "severity": "INFO",
  "category": "Business Logic",
  "pattern": "apply_discount\\(request\\.(args|get_json|get_data)\\(",
  "message": "Business logic function may be influenced directly by user input.",
  "suggestion": "Validate user input before applying it to business-critical logic.",
  "owasp": "A01:2021-Broken Access Control",
  "cwe": "CWE-840"
},{
  "id": "JS-EVAL-TAINT-001",
  "language": "javascript",
  "category": "Code Injection",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "eval",
  "requiresTaint": true,
  "sources": ["document.location", "window.location", "location.search", "localStorage", "sessionStorage"],
  "message": "eval() with user input → Remote Code Execution.",
  "suggestion": "Avoid eval(); use JSON.parse, structuredClone, or safe parsers.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-95"
},
{
  "id": "JS-INNERHTML-TAINT-001",
  "language": "javascript",
  "category": "Cross-Site Scripting",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "AssignmentExpression",
  "calleeName": "innerHTML",
  "requiresTaint": true,
  "sources": ["document.location", "window.location", "location.search", "document.URL", "localStorage", "sessionStorage"],
  "message": "User input flows into innerHTML → DOM XSS.",
  "suggestion": "Use textContent or sanitize HTML via DOMPurify.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79"
},
{
  "id": "JS-DOCWRITE-TAINT-001",
  "language": "javascript",
  "category": "Cross-Site Scripting",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "document.write",
  "requiresTaint": true,
  "sources": ["document.location", "window.location", "location.search", "document.URL"],
  "message": "document.write() with user input → DOM XSS.",
  "suggestion": "Avoid document.write(); use safe DOM APIs and sanitize inputs.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79"
},
{
  "id": "JS-SETTIMEOUT-TAINT-001",
  "language": "javascript",
  "category": "Code Injection",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "setTimeout|setInterval",
  "requiresTaint": true,
  "sources": ["document.location", "window.location", "location.search", "localStorage"],
  "message": "setTimeout/setInterval with user-controlled string → Code Execution.",
  "suggestion": "Always pass function references or arrow functions instead of strings.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-95"
},
{
  "id": "JS-CONSOLE-001",
  "language": "javascript",
  "category": "Information Disclosure",
  "severity": "LOW",
  "type": "regex",
  "pattern": "console\\.(log|debug|info|warn|error)\\(",
  "message": "Console logging detected → may leak sensitive data.",
  "suggestion": "Remove or disable console statements in production builds.",
  "owasp": "A09:2021-Security Logging and Monitoring Failures",
  "cwe": "CWE-200"
},
{
  "id": "JS-CLIENT-AUTH-001",
  "language": "javascript",
  "category": "Broken Access Control",
  "severity": "LOW",
  "type": "regex",
  "pattern": "if\\s*\\([^)]*user.*role[^)]*\\)",
  "message": "Client-side authorization logic found → must be enforced on server.",
  "suggestion": "Do not rely on client-side role checks; always enforce on server.",
  "owasp": "A01:2021-Broken Access Control",
  "cwe": "CWE-602"
},
{
  "id": "JS-JQUERY-OLD-001",
  "language": "javascript",
  "category": "Outdated Components",
  "severity": "LOW",
  "type": "regex",
  "pattern": "jquery-1\\.[0-9]+\\.[0-9]+",
  "message": "Old jQuery v1.x detected → vulnerable to known XSS & DoS issues.",
  "suggestion": "Upgrade to jQuery 3.x or latest supported version.",
  "owasp": "A06:2021-Vulnerable and Outdated Components",
  "cwe": "CWE-1104"
}
,
  {
    "id": "PHP-SYSTEM-TAINT-001",
    "language": "php",
    "category": "Command Injection",
    "owasp": "A03:2021-Injection",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "system",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "message": "system() called with user input → Command Injection.",
    "suggestion": "Avoid system(); use safer APIs or sanitize inputs."
  },
  {
    "id": "PHP-EXEC-TAINT-001",
    "language": "php",
    "category": "Command Injection",
    "owasp": "A03:2021-Injection",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "exec",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "message": "exec() called with user input → Command Injection.",
    "suggestion": "Avoid exec(); use safer APIs or sanitize inputs."
  },
  {
    "id": "PHP-MYSQLI-TAINT-001",
    "language": "php",
    "category": "SQL Injection",
    "owasp": "A03:2021-Injection",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "mysqli_query",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "message": "mysqli_query() with user input → SQL Injection.",
    "suggestion": "Always use prepared statements (mysqli_stmt or PDO)."
  },
  {
    "id": "PHP-INCLUDE-TAINT-001",
    "language": "php",
    "category": "File Inclusion",
    "owasp": "A05:2021-Security Misconfiguration",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "include",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "message": "include() with user input → Local/Remote File Inclusion.",
    "suggestion": "Never include user-controlled paths."
  },
  {
    "id": "PHP-UNSERIALIZE-TAINT-001",
    "language": "php",
    "category": "Insecure Deserialization",
    "owasp": "A08:2021-Software and Data Integrity Failures",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "call",
    "calleeName": "unserialize",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST", "$_COOKIE"],
    "message": "unserialize() on user input → Insecure Deserialization.",
    "suggestion": "Do not unserialize untrusted input. Use JSON instead."
  },{
  "id": "PY-TEMPLATE-SSTI-001",
  "language": "python",
  "category": "Cross-Site Scripting / Server-Side Template Injection",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "render_template_string",
  "requiresTaint": true,
  "sources": ["request.args", "request.form", "request.cookies"],
  "message": "User input flows into render_template_string → SSTI/XSS risk.",
  "suggestion": "Sanitize input or use safe template rendering with context variables."
},{
  "id": "PY-SQL-TAINT-001",
  "language": "python",
  "category": "SQL Injection",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "execute",
  "requiresTaint": true,
  "sources": ["request.args", "request.form", "request.cookies"],
  "message": "User input flows into SQL query without parameterization → SQL Injection.",
  "suggestion": "Use parameterized queries or ORM methods with placeholders."
},{
  "id": "PY-XXE-001",
  "language": "python",
  "category": "XML External Entity (XXE)",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "fromstring",
  "requiresTaint": true,
  "sources": ["request.data"],
  "message": "XML parsing of untrusted input → XXE vulnerability.",
  "suggestion": "Disable external entities or use a secure XML parser."
},{
  "id": "PY-PATH-TRAVERSAL-001",
  "language": "python",
  "category": "Path Traversal",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "open",
  "requiresTaint": true,
  "sources": ["request.args", "request.form", "request.cookies"],
  "message": "User input flows into file open → Path Traversal / Arbitrary File Read.",
  "suggestion": "Validate or whitelist filenames; prevent '..' or absolute paths."
},{
  "id": "PY-SSRF-001",
  "language": "python",
  "category": "Server-Side Request Forgery",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "urlopen",
  "requiresTaint": true,
  "sources": ["request.args", "request.form", "request.cookies"],
  "message": "User input flows into urlopen → SSRF risk.",
  "suggestion": "Validate URLs against a whitelist or use safe fetch mechanisms."
},{
  "id": "PY-OPEN-REDIRECT-001",
  "language": "python",
  "category": "Open Redirect",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "redirect",
  "requiresTaint": true,
  "sources": ["request.args", "request.form"],
  "message": "User input flows into redirect() → Open Redirect.",
  "suggestion": "Validate redirect URLs against a whitelist."
},{
  "id": "PY-DEBUG-MODE-001",
  "language": "python",
  "category": "Security Misconfiguration",
  "severity": "HIGH",
  "type": "config",
  "configCheck": {
    "variable": "app.run",
    "conditions": {
      "debug": true,
      "host": "0.0.0.0"
    }
  },
  "message": "Flask app running in debug mode and listening on all interfaces.",
  "suggestion": "Disable debug mode and bind to specific trusted interfaces in production."
},{
  "id": "JS-SETTIMEOUT-STRING-001",
  "language": "javascript",
  "category": "Dynamic Code Execution",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "setTimeout|setInterval",
  "argumentPosition": 0,
  "argumentType": "LiteralString",
  "message": "setTimeout/setInterval called with a string → dynamic code execution risk (eval-like).",
  "suggestion": "Use a function reference or arrow function instead of passing string code.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-95"
},
{
  "id": "JS-TEMP-FILE-002",
  "language": "javascript",
  "category": "Insecure Temporary File",
  "severity": "HIGH",
  "type": "taint-ast",
  "nodeType": "CallExpression",
  "calleeName": "fs.writeFileSync|fs.writeFile",
  "requiresTaint": true,
  "sources": ["req.query.*", "req.body.*", "req.params.*"],
  "message": "File written to predictable or user-controlled path → possible overwrite, symlink attack, or data leakage.",
  "suggestion": "Use secure temp file libraries (e.g., tmp, fs.mkdtemp) or randomize filenames in safe directories.",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-377"
}
,
  {
    "id": "PHP-OPEN-REDIRECT-001",
    "language": "php",
    "category": "Open Redirect",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "CallExpression",
    "calleeName": "header",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "message": "User input flows into header() → Open Redirect / HTTP Response Splitting.",
    "suggestion": "Validate URLs against a whitelist."
  },
  {
    "id": "PHP-LDAP-INJECTION-002",
    "language": "php",
    "category": "LDAP Injection",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "nodeType": "CallExpression",
    "calleeName": "ldap_search",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "message": "User input flows into ldap_search() → LDAP Injection.",
    "suggestion": "Sanitize user input or use parameterized LDAP filters."
  },
  {
    "id": "PHP-XPATH-INJECTION-003",
    "language": "php",
    "category": "XPath Injection",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "nodeType": "CallExpression",
    "calleeName": "xpath",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "message": "User input flows into xpath() → XPath Injection.",
    "suggestion": "Sanitize input or use parameterized XPath queries."
  },
  {
    "id": "PHP-REFLECTION-INJECTION-004",
    "language": "php",
    "category": "Reflection Injection",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "nodeType": "NewExpression",
    "calleeName": "ReflectionClass",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "message": "User input used in ReflectionClass → code execution risk.",
    "suggestion": "Avoid using user input for class or method names."
  },
  {
    "id": "PHP-BACKTICK-INJECTION-005",
    "language": "php",
    "category": "Command Injection",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "nodeType": "BacktickExpression",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "message": "User input executed using backticks → Command Injection.",
    "suggestion": "Never execute user input; use safe APIs."
  },
  {
    "id": "PHP-TYPE-JUGGLING-006",
    "language": "php",
    "category": "Type Juggling",
    "severity": "HIGH",
    "type": "context-ast",
    "nodeType": "BinaryExpression",
    "calleeName": "==",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "message": "Comparison using == may allow type juggling attacks.",
    "suggestion": "Use strict comparison (===) for security checks."
  },
  {
    "id": "PHP-REPLACE-EVAL-007",
    "language": "php",
    "category": "Code Execution",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "CallExpression",
    "calleeName": "preg_replace",
    "requiresTaint": true,
    "sources": ["$_GET", "$_POST", "$_REQUEST"],
    "message": "preg_replace() with /e modifier executes code → RCE risk.",
    "suggestion": "Avoid using /e modifier; use preg_replace_callback."
  },{
    "id": "JAVA-SQLI-001",
    "language": "java",
    "category": "SQL Injection",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "nodeType": "MethodInvocation",
    "calleeName": "executeQuery",
    "requiresTaint": true,
    "sources": ["request.getParameter", "Scanner.nextLine"],
    "message": "User input flows into executeQuery() → SQL Injection.",
    "suggestion": "Use prepared statements or parameterized queries."
  },
  {
    "id": "JAVA-OS-CMD-001",
    "language": "java",
    "category": "Command Injection",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "nodeType": "MethodInvocation",
    "calleeName": "exec",
    "requiresTaint": true,
    "sources": ["request.getParameter", "Scanner.nextLine"],
    "message": "User input flows into Runtime.exec() → Command Injection.",
    "suggestion": "Avoid passing user input to system commands. Validate or sanitize input."
  },
  {
    "id": "JAVA-XSS-001",
    "language": "java",
    "category": "XSS",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "nodeType": "MethodInvocation",
    "calleeName": "println",
    "requiresTaint": true,
    "sources": ["request.getParameter", "Scanner.nextLine"],
    "message": "User input flows into println() → Reflected XSS.",
    "suggestion": "Escape user input before rendering in HTML output."
  },
  {
    "id": "JAVA-SSRF-001",
    "language": "java",
    "category": "SSRF",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "nodeType": "ConstructorInvocation",
    "calleeName": "URL",
    "requiresTaint": true,
    "sources": ["request.getParameter", "Scanner.nextLine"],
    "message": "User input flows into new URL() → Possible SSRF.",
    "suggestion": "Validate and restrict URLs to allowed domains."
  },
  {
    "id": "JAVA-PATH-TRAVERSAL-001",
    "language": "java",
    "category": "Path Traversal",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "nodeType": "MethodInvocation",
    "calleeName": "File",
    "requiresTaint": true,
    "sources": ["request.getParameter", "Scanner.nextLine"],
    "message": "User input flows into File constructor → Path Traversal.",
    "suggestion": "Validate filenames or restrict access to allowed directories."
  },
  {
    "id": "JAVA-JWT-INSECURE-001",
    "language": "java",
    "category": "Insecure JWT Handling",
    "severity": "HIGH",
    "type": "taint-ast",
    "nodeType": "MethodInvocation",
    "calleeName": "decode",
    "requiresTaint": true,
    "sources": ["request.getParameter", "Scanner.nextLine"],
    "message": "User input flows into JWT decode() without verification → Insecure JWT handling.",
    "suggestion": "Always verify JWT signatures before trusting payloads."
  },
  {
    "id": "JAVA-WEAK-HASH-001",
    "language": "java",
    "category": "Weak Hashing",
    "severity": "HIGH",
    "type": "ast",
    "nodeType": "MethodInvocation",
    "calleeName": "getInstance",
    "message": "Weak hashing algorithm (MD5/SHA1) used.",
    "suggestion": "Use strong hashing algorithms like SHA-256 or bcrypt."
  },
  {
    "id": "JAVA-HARDCODED-CRED-001",
    "language": "java",
    "category": "Hardcoded Credentials",
    "severity": "CRITICAL",
    "type": "regex",
    "pattern": "(?i)(password\\s*=\\s*['\"].+['\"]|secret\\s*=\\s*['\"].+['\"])",
    "message": "Hardcoded credentials or secrets found in source code.",
    "suggestion": "Remove hardcoded credentials and use environment variables or secure vaults."
  },{
  "id": "JS-SQL-INJECTION-STRICT",
  "language": "javascript",
  "category": "SQL Injection",
  "severity": "CRITICAL",
  "type": "taint-ast",
  "nodeType": "CallExpression",
  "calleeName": "query",
  "requiresTaint": true,
  "sources": ["req.body.username", "req.body.password", "req.query.id", "req.params.id"],
  "message": "User input directly flows into SQL query without sanitization → SQL Injection.",
  "suggestion": "Use parameterized queries or ORM query builders; never concatenate raw user input.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-89"
},
{
  "id": "JS-REFLECTED-XSS-STRICT",
  "language": "javascript",
  "category": "Reflected XSS",
  "severity": "HIGH",
  "type": "taint-ast",
  "nodeType": "CallExpression",
  "calleeName": "send",
  "requiresTaint": true,
  "sources": ["req.query.message", "req.body.comment"],
  "message": "User input directly concatenated into HTML → Reflected XSS.",
  "suggestion": "Escape or sanitize input before sending in HTML responses.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79"
},
{
  "id": "JS-STORED-XSS-STRICT",
  "language": "javascript",
  "category": "Stored XSS",
  "severity": "HIGH",
  "type": "taint-ast",
  "nodeType": "CallExpression",
  "calleeName": "insert|save|update",
  "requiresTaint": true,
  "sources": ["req.body.comment", "req.body.content"],
  "message": "User input stored in DB and rendered unsanitized → Stored XSS.",
  "suggestion": "Sanitize before saving or before rendering the data.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-79"
},
{
  "id": "JS-PATH-TRAVERSAL-STRICT",
  "language": "javascript",
  "category": "Path Traversal",
  "severity": "HIGH",
  "type": "taint-ast",
  "nodeType": "CallExpression",
  "calleeName": "fs.readFile",
  "requiresTaint": true,
  "sources": ["req.query.file", "req.body.path"],
  "message": "User input used in fs.readFile → Path Traversal risk.",
  "suggestion": "Whitelist allowed paths or normalize and validate paths before reading.",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-22"
},
{
  "id": "JS-SSRF-STRICT",
  "language": "javascript",
  "category": "Server-Side Request Forgery",
  "severity": "HIGH",
  "type": "taint-ast",
  "nodeType": "CallExpression",
  "calleeName": "http.get|https.get|axios.get|fetch",
  "requiresTaint": true,
  "sources": ["req.query.url", "req.body.url"],
  "message": "User input passed to HTTP request → SSRF.",
  "suggestion": "Validate URLs against a safe whitelist; never directly request arbitrary URLs.",
  "owasp": "A10:2021-SSRF",
  "cwe": "CWE-918"
},
{
  "id": "JS-UNSAFE-FILE-UPLOAD-STRICT",
  "language": "javascript",
  "category": "Unsafe File Upload",
  "severity": "HIGH",
  "type": "regex",
  "pattern": "multer\\(\\s*\\{(?!.*fileFilter).*\\}\\s*\\)",
  "message": "File upload using multer with no fileFilter → Unsafe file upload.",
  "suggestion": "Use multer fileFilter to restrict uploads to allowed MIME types.",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-434"
},
{
  "id": "JS-OPEN-REDIRECT-STRICT",
  "language": "javascript",
  "category": "Open Redirect",
  "severity": "HIGH",
  "type": "taint-ast",
  "nodeType": "CallExpression",
  "calleeName": "redirect",
  "requiresTaint": true,
  "sources": ["req.query.next", "req.body.url"],
  "message": "User input passed directly to res.redirect → Open Redirect.",
  "suggestion": "Validate redirect URLs against a whitelist; never redirect to arbitrary input.",
  "owasp": "A01:2021-Broken Access Control",
  "cwe": "CWE-601"
},
{
  "id": "JS-LDAP-INJECTION-001",
  "language": "javascript",
  "category": "LDAP Injection",
  "severity": "CRITICAL",
  "type": "taint-ast",
  "nodeType": "CallExpression",
  "calleeName": "ldap.search",
  "requiresTaint": true,
  "sources": ["req.body.*", "req.query.*", "req.params.*"],
  "message": "User input flows into LDAP search without validation → LDAP Injection.",
  "suggestion": "Validate or sanitize LDAP query inputs; use parameterized filters.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-90"
},
{
  "id": "JS-XPATH-INJECTION-001",
  "language": "javascript",
  "category": "XPath Injection",
  "severity": "CRITICAL",
  "type": "taint-ast",
  "nodeType": "CallExpression",
  "calleeName": "xpath.select",
  "requiresTaint": true,
  "sources": ["req.body.*", "req.query.*"],
  "message": "User input flows into xpath() evaluation without sanitization → XPath Injection.",
  "suggestion": "Sanitize XPath inputs or use parameterized XPath queries.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-643"
},
{
  "id": "JS-REFLECTION-INJECTION-001",
  "language": "javascript",
  "category": "Reflection Injection",
  "severity": "CRITICAL",
  "type": "taint-ast",
  "nodeType": "NewExpression",
  "calleeName": "Function|eval",
  "requiresTaint": true,
  "sources": ["req.body.*", "req.query.*", "req.params.*"],
  "message": "User input reaches dynamic code evaluation → Reflection Injection.",
  "suggestion": "Avoid eval()/Function constructors with user input; validate or sanitize input.",
  "owasp": "A03:2021-Injection",
  "cwe": "CWE-95"
},
{
  "id": "JS-TYPE-JUGGLING-001",
  "language": "javascript",
  "category": "Type Juggling / Weak Comparison",
  "severity": "HIGH",
  "type": "regex",
  "pattern": "==\\s*crypto\\.createHash\\(['\"]md5['\"]\\)",
  "message": "Loose comparison (==) with MD5 hash → Type juggling vulnerability.",
  "suggestion": "Use strict equality (===) and stronger hashing algorithms.",
  "owasp": "A02:2021-Cryptographic Failures",
  "cwe": "CWE-697"
},
{
  "id": "JS-XXE-BILLION-LAUGHS-001",
  "language": "javascript",
  "category": "XXE / Billion Laughs",
  "severity": "CRITICAL",
  "type": "regex",
  "pattern": "xml2js\\.parseString\\([^)]*{[^}]*explicitEntities:\\s*true",
  "message": "XML parser with entity expansion enabled → XXE / Billion Laughs risk.",
  "suggestion": "Disable external entity expansion when parsing XML.",
  "owasp": "A05:2021-Security Misconfiguration",
  "cwe": "CWE-611"
}
,{
    "id": "PHP-LDAP-INJECTION-001",
    "language": "php",
    "category": "LDAP Injection",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "nodeType": "CallExpression",
    "calleeName": "ldap_search",
    "requiresTaint": true,
    "sources": ["$_GET.*", "$_POST.*", "$_REQUEST.*"],
    "message": "User input flows into ldap_search() → LDAP Injection.",
    "suggestion": "Validate LDAP filters; avoid concatenating raw input."
  },
  {
    "id": "PHP-XPATH-INJECTION-001",
    "language": "php",
    "category": "XPath Injection",
    "severity": "CRITICAL",
    "type": "taint-ast",
    "nodeType": "CallExpression",
    "calleeName": "xpath",
    "requiresTaint": true,
    "sources": ["$_GET.*", "$_POST.*"],
    "message": "User input flows into xpath evaluation → XPath Injection.",
    "suggestion": "Use parameterized XPath queries or sanitize inputs."
  },
  {
    "id": "PHP-REFLECTION-INJECTION-001",
    "language": "php",
    "category": "Reflection Injection",
    "severity": "HIGH",
    "type": "taint-ast",
    "nodeType": "NewExpression",
    "calleeName": "ReflectionClass|ReflectionMethod",
    "requiresTaint": true,
    "sources": ["$_GET.*", "$_POST.*"],
    "message": "User input used in ReflectionClass/Method → Reflection Injection.",
    "suggestion": "Avoid passing untrusted input to reflection APIs."
  },
  {
    "id": "PHP-TYPE-JUGGLING-001",
    "language": "php",
    "category": "Type Juggling",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "==\\s*md5\\(",
    "message": "Loose comparison with MD5 hash → Type juggling vulnerability.",
    "suggestion": "Use === and stronger hashing algorithms."
  },
  {
    "id": "PHP-XXE-BILLION-LAUGHS-001",
    "language": "php",
    "category": "XXE / Billion Laughs",
    "severity": "CRITICAL",
    "type": "regex",
    "pattern": "loadXML\\([^)]*LIBXML_NOENT",
    "message": "XML parsed with LIBXML_NOENT → XXE / Billion Laughs risk.",
    "suggestion": "Disable external entity expansion (do not use LIBXML_NOENT)."
  },
  {
    "id": "PHP-ASSERT-INJECTION-001",
    "language": "php",
    "category": "Assert Injection",
    "severity": "HIGH",
    "type": "taint-ast",
    "nodeType": "CallExpression",
    "calleeName": "assert",
    "requiresTaint": true,
    "sources": ["$_GET.*", "$_POST.*", "$_REQUEST.*"],
    "message": "User input flows into assert() → Potential code injection.",
    "suggestion": "Validate inputs before passing to assert()."
  },
  {
    "id": "PHP-UNSAFE-EXTRACT-001",
    "language": "php",
    "category": "Unsafe extract()",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "extract\\([^,]+,\\s*EXTR_SKIP\\)",
    "message": "extract() with EXTR_SKIP → Unsafe variable overwrite.",
    "suggestion": "Avoid EXTR_SKIP; explicitly define variables."
  },
  {
    "id": "PHP-UNSAFE-VARIABLE-VARIABLES-001",
    "language": "php",
    "category": "Unsafe Variable Variables",
    "severity": "HIGH",
    "type": "taint-ast",
    "nodeType": "Variable",
    "calleeName": "${.*}",
    "requiresTaint": true,
    "sources": ["$_GET.*", "$_POST.*"],
    "message": "User input used to create variable names → Variable injection.",
    "suggestion": "Use arrays instead of variable variables."
  },
  {
    "id": "PHP-PASSWORD-IN-URL-001",
    "language": "php",
    "category": "Password in URL",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "\\$_GET\\['password'\\]",
    "message": "Password passed in URL → Information exposure.",
    "suggestion": "Transmit passwords in POST requests only."
  },{
  "id": "JS-NO-RATE-LIMITING-001",
  "language": "javascript",
  "category": "Lack of Rate Limiting",
  "severity": "HIGH",
  "type": "heuristic",
  "nodeType": "CallExpression",
  "calleeName": "app.use",
  "pattern": "app\\.use\\([^)]*(?!rateLimit)[^)]*\\)",
  "message": "No rate limiting middleware detected → Potential brute force or DoS risk.",
  "suggestion": "Add express-rate-limit or equivalent middleware to enforce rate limiting.",
  "owasp": "A06:2021 - Security Misconfiguration",
  "cwe": "CWE-770"
},
{
  "id": "JS-WEAK-COOKIE-FLAGS-001",
  "language": "javascript",
  "category": "Weak Cookie Flags",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "res.cookie",
  "message": "Cookies set without Secure/HttpOnly/SameSite flags → Session hijacking possible.",
  "suggestion": "Always set Secure, HttpOnly, and SameSite flags for cookies.",
  "owasp": "A05:2021 - Security Misconfiguration",
  "cwe": "CWE-614"
},
{
  "id": "JS-CSP-DISABLED-001",
  "language": "javascript",
  "category": "CSP Disabled",
  "severity": "HIGH",
  "type": "regex",
  "pattern": "helmet\\(\\{\\s*contentSecurityPolicy:\\s*false\\s*\\}\\)",
  "message": "Content Security Policy explicitly disabled → Increases XSS risk.",
  "suggestion": "Enable CSP via helmet with proper directives.",
  "owasp": "A05:2021 - Security Misconfiguration",
  "cwe": "CWE-693"
},
{
  "id": "JS-WEAK-PASSWORD-POLICY-001",
  "language": "javascript",
  "category": "Weak Password Policy",
  "severity": "HIGH",
  "type": "heuristic",
  "pattern": "password.*length\\s*<\\s*8",
  "message": "Weak password length enforcement → Users may choose weak passwords.",
  "suggestion": "Require min 8 chars, mixed-case, numbers, and symbols.",
  "owasp": "A07:2021 - Identification and Authentication Failures",
  "cwe": "CWE-521"
},
{
  "id": "JS-BROKEN-ACCESS-CONTROL-001",
  "language": "javascript",
  "category": "Broken Access Control in Routes",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "app.get|app.post|app.put|app.delete",
  "message": "Route defined without authentication/authorization → Broken access control.",
  "suggestion": "Add authentication/authorization middleware for sensitive routes.",
  "owasp": "A01:2021 - Broken Access Control",
  "cwe": "CWE-285"
}
,{
    "id": "PHP-NO-RATE-LIMITING-001",
    "language": "php",
    "category": "No Rate Limiting",
    "severity": "HIGH",
    "type": "heuristic",
    "pattern": "(Route::|$app->)\\w+\\([^)]*\\)(?!.*throttle)",
    "message": "No rate limiting on routes → Potential DoS risk.",
    "suggestion": "Add middleware or decorators to enforce rate limiting."
  },
  {
    "id": "PHP-WEAK-COOKIE-FLAGS-001",
    "language": "php",
    "category": "Weak Cookie Flags",
    "severity": "HIGH",
    "type": "ast",
    "nodeType": "CallExpression",
    "calleeName": "setcookie",
    "message": "Cookies set without Secure/HttpOnly flags → Potential session hijacking.",
    "suggestion": "Always set Secure and HttpOnly flags when calling setcookie()."
  },
  {
    "id": "PHP-CSP-DISABLED-001",
    "language": "php",
    "category": "CSP Disabled",
    "severity": "HIGH",
    "type": "regex",
    "pattern": "header\\(['\"]Content-Security-Policy:\\s*none['\"]\\)",
    "message": "CSP disabled → Increased XSS risk.",
    "suggestion": "Enable a strong Content Security Policy via headers."
  },
  {
    "id": "PHP-WEAK-PASSWORD-POLICY-001",
    "language": "php",
    "category": "Weak Password Policy",
    "severity": "HIGH",
    "type": "heuristic",
    "pattern": "strlen\\(\\$password\\)\\s*<\\s*8|preg_match\\('.*'",
    "message": "Weak password validation → Users may choose weak passwords.",
    "suggestion": "Enforce minimum 8-character passwords with mixed character types."
  },
  {
    "id": "PHP-BROKEN-ACCESS-CONTROL-001",
    "language": "php",
    "category": "Broken Access Control in Routes",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "MethodCall",
    "calleeName": "get|post|put|delete",
    "message": "Route defined without authentication/authorization → Broken access control.",
    "suggestion": "Add middleware or guards to enforce access control for all routes."
  },{
  "id": "JS-WEAK-PASSWORD-EDGE-001",
  "language": "javascript",
  "category": "Weak Password Policy",
  "severity": "HIGH",
  "type": "heuristic",
  "pattern": "password\\.length\\s*<\\s*4",
  "message": "Password length less than 4 → Extremely weak password policy.",
  "suggestion": "Enforce minimum password length of 8+ characters.",
  "owasp": "A07:2021 - Identification and Authentication Failures",
  "cwe": "CWE-521"
}
,{
  "id": "JS-WEAK-COOKIE-FLAGS-EDGE-001",
  "language": "javascript",
  "category": "Weak Cookie Flags",
  "severity": "HIGH",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "res.cookie",
  "message": "Cookie set with httpOnly: false or secure: false → Session hijacking risk.",
  "suggestion": "Always set httpOnly: true and secure: true for cookies.",
  "owasp": "A05:2021 - Security Misconfiguration",
  "cwe": "CWE-614"
},{
  "id": "JS-BROKEN-ACCESS-CONTROL-EDGE-001",
  "language": "javascript",
  "category": "Broken Access Control",
  "severity": "CRITICAL",
  "type": "context-ast",
  "nodeType": "CallExpression",
  "calleeName": "app.post|app.get|app.put|app.delete",
  "sources": ["/api/upload-profile", "/api/proxy"],
  "message": "Sensitive API route missing authentication/authorization → Broken access control.",
  "suggestion": "Add authentication/authorization middleware to these sensitive routes.",
  "owasp": "A01:2021 - Broken Access Control",
  "cwe": "CWE-285"
}
,
{
    "id": "PHP-WEAK-PASSWORD-EDGE-001",
    "language": "php",
    "category": "Weak Password Policy",
    "severity": "HIGH",
    "type": "heuristic",
    "pattern": "strlen\\(\\$password\\)\\s*<\\s*4",
    "message": "Password length less than 4 → Extremely weak password policy.",
    "suggestion": "Enforce minimum password length of 8+ characters."
  },
  {
    "id": "PHP-WEAK-COOKIE-FLAGS-EDGE-001",
    "language": "php",
    "category": "Weak Cookie Flags",
    "severity": "HIGH",
    "type": "ast",
    "nodeType": "CallExpression",
    "calleeName": "setcookie",
    "message": "Cookie set with httpOnly: false or secure: false → Session hijacking risk.",
    "suggestion": "Always set httpOnly and secure flags when calling setcookie()."
  },
  {
    "id": "PHP-BROKEN-ACCESS-CONTROL-EDGE-001",
    "language": "php",
    "category": "Broken Access Control",
    "severity": "CRITICAL",
    "type": "context-ast",
    "nodeType": "MethodCall",
    "calleeName": "post|get|put|delete",
    "sources": ["/api/upload-profile", "/api/proxy"],
    "message": "Sensitive API route missing authentication/authorization → Broken access control.",
    "suggestion": "Add authentication/authorization middleware or guards for these routes."
  },{
  "id": "JS-SETTIMEOUT-TAINT-001",
  "language": "javascript",
  "type": "context-ast",
  "severity": "CRITICAL",
  "category": "Code Injection",
  "nodeType": "CallExpression",
  "calleeName": "setTimeout",
  "requiresTaint": true,
  "sources": ["req.query", "req.body", "document.location", "window.location"],
  "message": "setTimeout() with user-controlled string → Code Execution.",
  "suggestion": "Always pass function references, not strings."
}









]